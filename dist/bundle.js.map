{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/parse-dds/index.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/common.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec3.js","webpack:///./src/axisAlignedBox.ts","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec4.js","webpack:///./src/gltf-enums.ts","webpack:///./src/constants.ts","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat4.js","webpack:///./src/camera.ts","webpack:///./src/utils.ts","webpack:///./src/glArrayBuffer.ts","webpack:///./src/objparser.ts","webpack:///./src/errors.ts","webpack:///./src/shaders.ts","webpack:///./src/progressbar.ts","webpack:///./src/object.ts","webpack:///./src/scene.ts","webpack:///./src/shaders/includes/common.ts","webpack:///./src/shaders/final.ts","webpack:///./src/shaders/includes/pbr.ts","webpack:///./src/shaders/gBuffer.ts","webpack:///./src/shaders/ssao.ts","webpack:///./src/shaders/visualize-lights.ts","webpack:///./src/SSAOState.ts","webpack:///./src/shaders/shadowMap.ts","webpack:///./src/material.ts","webpack:///./src/shaders/ssr.ts","webpack:///./src/deferredRenderer.ts","webpack:///./src/ui.ts","webpack:///./src/quad.ts","webpack:///./node_modules/gl-matrix/src/gl-matrix/quat.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat3.js","webpack:///./src/texture.ts","webpack:///./src/gltf.ts","webpack:///./src/main.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","s","i","t","modules","call","l","m","c","d","name","getter","o","Object","defineProperty","get","r","Symbol","toStringTag","value","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","DDS_MAGIC","DDSD_MIPMAPCOUNT","DDPF_FOURCC","FOURCC_DXT1","fourCCToInt32","FOURCC_DXT3","FOURCC_DXT5","FOURCC_DX10","FOURCC_FP32F","DDSCAPS2_CUBEMAP","D3D10_RESOURCE_DIMENSION_TEXTURE2D","DXGI_FORMAT_R32G32B32A32_FLOAT","headerLengthInt","off_magic","off_size","off_flags","off_height","off_width","off_mipmapCount","off_pfFlags","off_pfFourCC","off_caps2","charCodeAt","arrayBuffer","blockBytes","format","header","Int32Array","Error","fourCC","dx10Header","Uint32Array","slice","resourceDimension","String","fromCharCode","flags","mipmapCount","Math","max","cubemap","dataLength","width","height","dataOffset","texWidth","texHeight","images","f","requiredMipLevels","log","push","offset","length","shape","floor","S","EPSILON","ARRAY_TYPE","Float32Array","Array","random","PI","out","fromValues","x","y","z","copy","a","set","add","b","vec3_scale","normalize","len","sqrt","vec3_dot","cross","ax","ay","az","bx","by","bz","transformMat4","w","rotateX","cos","sin","rotateY","sub","vec3_len","vec","axisAlignedBox_AxisAlignedBox","[object Object]","this","_cacheNeedsUpdate","_vertexBufferCache","_min","_max","min","v","allowCached","params","GLArrayBufferDataParams","ArrayBufferDataType","POINTS","elementSize","data","uniqueVertices","glArrayBuffer_GLArrayBufferData","LINES","dlf","dlb","drf","drb","urf","urb","ulf","ulb","vec4_create","vec4_fromValues","vec4_copy","vec4_scale","vec4_transformMat4","GLTF","TRIANGLES","C","5120","WebGL2RenderingContext","BYTE","5121","UNSIGNED_BYTE","5122","SHORT","5123","UNSIGNED_SHORT","5125","UNSIGNED_INT","5126","FLOAT","ATTRIBUTE_POSITION_LOC","ATTRIBUTE_NORMALS_LOC","ATTRIBUTE_UV_LOC","ATTRIBUTE_TANGENT_LOC","UNIFORM_CAMERA_POSITION","UNIFORM_WORLD_TO_CAMERA_MAT4","UNIFORM_CAMERA_TO_WORLD_MAT4","UNIFORM_PERSPECTIVE_MATRIX","UNIFORM_MODEL_WORLD_MATRIX","UNIFORM_MODEL_VIEW_MATRIX","UNIFORM_GBUF_POSITION","UNIFORM_GBUF_NORMAL","UNIFORM_GBUF_ALBEDO","UNIFORM_GBUF_MR","UNIFORM_HAS_TANGENT","SAMPLE_GLTF_SPONZA_DDS","mat4_create","mat4_set","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","identity","mat4_multiply","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","translate","mat4_mul","tmpVec3","ProjectionMatrix","near","far","matrix","camera_Camera","aspect","_right","_camToWorldNeedsUpdate","_worldToCamNeedsUpdate","_projectionMatrixNeedsUpdate","_position","_forward","_up","fov","_projectionMatrix","_worldToCamera","_cameraToWorld","position","update","forward","Y","computeWorldToCamera","computeCameraToWorld","fovy","nf","tan","Infinity","perspective","worldUp","up","target","right","mr","tmpIdentityMatrix","clip","utils_lerp","randFloat","randVec3","makeObjLoader","sphere","fetchObject","cacheOnFirstUse","factory","obj","makeCache","cache","index","undefined","tmpMat4","utils_tmpVec3","tmpVec4","tmpBoundingBoxCache","makeWorldSpaceCameraFrustum","identityAABB","identityAABBVertexBuffer","identityAABBWireframeBuffer","camera","pointsOnly","isTemporary","camToWorld","getCameraToWorld","cubeVertices","asVerticesBuffer","asWireFrameBuffer","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","invert","projectionMatrix","it","iterator","tmpIter","ve","vs","buf","makeDirectionalLightWorldToCameraMatrix","tmpCamera","direction","calculateUpFromWorldUp","getWorldToCamera","computeBoundingBoxInTransformedSpace","tmpBoundingBoxVerticesBuf","tmpVec1","tmpVec3_2","bb","scene","transform","objFilter","includePointLights","allBB","_","bboxForChildInTransformedSpace","boundingBoxComponent","computedFromChildren","children","forEach","getModelToWorld","objLSBoundingBox","box","translateTo","computeBoundingBox","setMin","setMax","pointLights","radius","optimizeNearFar","minNear","minFar","tmpProjectionMatrix","computeDirectionalLightCameraWorldToProjectionMatrix","light","worldToLightViewSpace","cameraFrustumBB","translateInPlace","mesh","shadowCaster","lightClipSpaceMatrix","left","bottom","top","fn","tb","rl","orthoProjection","mapComputeIfAbsent","callback","has","FLOAT_BYTES","VEC4","UV_SIZE","glArrayBuffer_tmpVec1","glArrayBuffer_tmpVec4","LINE_STRIP","TRIANGLE_STRIP","hasNormals","hasUVs","vertexCount","dataType","normalsSize","uvSize","computeStrideInBytes","size","computeNormalOffset","compareAndSet","inp","objects","invertZ","start","gl","glArrayBuffer_GLArrayBufferV1","result","translateToBuf","ue","outIter","GlArrayBufferDataIterator","initialize","currentVertex","done","computeStrideInElements","noffset","uvoffset","ne","us","computeOffsets","ArrayWebGLBufferWrapper","_buf","createBuffer","bindVertexArray","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","deleteBuffer","ELEMENT_ARRAY_BUFFER","ElementArrayWebGLBufferWrapper","BufferView","byteLength","byteOffset","byteStride","_byteLength","_byteOffset","_byteStride","rt","glArrayBuffer_GLTFAccessor","accessor","_accessor","_data","Ut","jt","COMPONENT_TYPES_TO_GL_TYPE","componentType","type","attribLocation","webGlBuf","enableVertexAttribArray","vertexAttribPointer","numberOfComponents","componentTypeToGlType","normalized","glArrayBuffer_GLArrayBufferGLTF","indices","uv","normal","tangent","boundingBox","vao","prepareVAO","console","renderMode","drawElements","count","drawArrays","arr","createVertexArray","normals","setupVertexPositionsPointer","setupVertexNormalsPointer","setupVertexUVPointer","setupTangentPointer","e","deleteVertexArray","setupVertexPointer","usage","buffer","parepareVAO","computeUVOffset","objparser_ObjParser","addHomogenousCoordinate","textDecoder","TextDecoder","lineBuf","faceCount","vertexBuf","normalBuf","texBuf","finalBuf","addHomogenous","getTriangleCount","line","startsWith","split","parseFloat","values","vidx","parseInt","tidx","nidx","lines","decode","stream","pop","feedLine","async","url","progressCallback","parser","response","fetch","headers","body","reader","getReader","objParser","read","feedByteChunk","endParsing","GLError","LinkError","ShaderLoadError","redefine","shaderSource","defineName","replace","RegExp","shaders_RawShader","source","autodelete","shader","createShader","compileShader","getShaderParameter","COMPILE_STATUS","error","getShaderInfoLog","deleteShader","join","addLineNumbers","shaders_ShaderProgram","fs","_attribs","Map","_uniforms","program","createProgram","attachShader","getShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","useProgram","getProgram","delete","shouldAutodelete","existing","loc","getAttribLocation","u","getUniformLocation","FragmentShader","super","FRAGMENT_SHADER","VertexShader","VERTEX_SHADER","ShaderSourceBuilder","topChunks","chunks","defines","redefines","precision","k","chunk","other","tc","progressbar_ProgressBarCommon","fullScreenBuffer","percentLoc","ProgressBar","common","use","percent","uniform1f","draw","Component","MeshComponent","primitives","shadowReceiver","forceRenderMode","isArray","object_BoundingBoxComponent","visible","glArrayBuffer","object_BaseLightComponent","color","intensity","object_DirectionalLight","PointLightComponent","object_TransformComponent","modelToWorld","modelToParent","rotation","scale","computeModelToParent","computeModelToWorld","getModelToParent","mw","parent","mat4_scale","rad","mat4_rotateX","mat4_rotateY","mat4_rotateZ","MaterialComponent","material","GameObject","_mesh","_pointLight","_directionalLight","_boundingBoxComponent","_transform","ge","ht","reverse","GameObjectBuilder","getBoundingBox","meshComponent","setObject","directionalLight","pointLight","bbox","randomPointLight","posScale","setPointLightComponent","build","Scene","directionalLights","GBUF_TEXTURES","QUAD_FRAGMENT_INPUTS","WORLD_AND_CAMERA_TRANSFORMS","SHOW_LAYER_FS","addTopChunk","addChunk","FINAL_SHADER_SOURCE","Rn","Fe","Oe","GBUFFER_SHADER_SOURCE","ot","SSAO_SHADER_SOURCE","Re","setPrecision","Pe","VISUALIZE_LIGHTS_SHADERS","Le","SSAOConfig","enabled","sampleCount","noiseScale","scalePower","bias","strength","blurPositionThreshold","blurNormalThreshold","assign","SSAOState_SSAOState","config","recalculate","usedConfig","samples","pow","tangentSpaceSamples","randomRotationVectors","randomRotationVectorsView","noiseTexture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGB16F","RGB","texParameteri","TEXTURE_WRAP_S","REPEAT","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","deleteTexture","SHADOWMAP_SHADERS","TextureOrValue","texture","factor","material_Material","albedo","metallic","roughness","isReflective","g","setValue","normalMap","SSR_SHADERS","ShadowMapConfig","fixedBias","normalBias","SSRConfig","deferredRenderer_DeferredRendererConfig","showLayer","ShowLayer","Final","normalMapsEnabled","albedoTexturesEnabled","ssao","shadowMap","ssr","showLayerAmong","among","StencilValues","StencilBits","bindUniformTx","uniformName","tx","activeTexture","TEXTURE0","uniform1i","createAndBindBufferTexture","internalFormat","filtering","canvas","CLAMP_TO_EDGE","withViewport","needReverse","viewport","deferredRenderer_GBuffer","rendererConfig","defaultMaterial","ATTACHMENT_POSITION","COLOR_ATTACHMENT0","ATTACHMENT_NORMAL","ATTACHMENT_ALBEDO","ATTACHMENT_METALLIC_ROUGHNESS","setupGBuffer","bindFramebuffer","DRAW_FRAMEBUFFER","gFrameBuffer","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","enable","CULL_FACE","DEPTH_TEST","STENCIL_TEST","stencilMask","gBufferShader","uniform3fv","uniformMatrix4fv","drawBuffers","disable","BLEND","renderObject","prefix","txOrValue","uniformFunc","valueName","hasTxName","txName","hasFactorName","factorName","hasTexture","getTexture","hasFactor","modelWorldMatrix","modelViewMatrix","bindValueOrTx","hasNormalMap","hasTangent","stencilValue","NORMAL","SSR","stencilFunc","ALWAYS","stencilOp","KEEP","REPLACE","asArrayBuffer","albedoTX","RGBA","metallicRoughnessTX","RG16F","RG","HALF_FLOAT","normalTX","RG32F","posTx","RGBA16F","depthTX","DEPTH24_STENCIL8","DEPTH_STENCIL","UNSIGNED_INT_24_8","createFramebuffer","framebufferTexture2D","DEPTH_STENCIL_ATTACHMENT","checkFrameBufferStatusOrThrow","deferredRenderer_SSAORenderer","ssaoParameters","ssaoConfig","gBuffer","fullScreenQuad","setupSSAOBuffers","recompileShaders","Bs","_ssaoBlurTx","firstPassShader","blurShader","deleteAll","vertexShader","first_pass_fs","clone","define","toString","blur_pass_fs","FRAMEBUFFER","firstPassFB","ssaoState","uniform2fv","firstPass","blurPassFB","_ssaoFirstPassTx","blurPass","R16F","RED","deferredRenderer_ShadowMapRenderer","setupShadowMapBuffers","qs","_shadowMapTx","Js","_shadowMapWidth","ti","_shadowMapHeight","lightCameraWorldToProjectionMatrix","shadowMapShader","shadowMapFB","drawObject","DEPTH_COMPONENT16","DEPTH_COMPONENT","DEPTH_ATTACHMENT","deferredRenderer_LightingRenderer","ssaoRenderer","shadowMapRenderer","sphereMesh","showBuffersShader","directionalLightShader","pointLightShader","_recompileOnNextRun","sphereObject","setMeshComponent","fb","resultTX","visualizeLightsShader","FS","recompileOnNextRun","showLayerFS","shadowMapWidth","shadowMapHeight","defineIfTrue","isEnabled","SSAO","Color","Positions","ShadowMap","Normals","Metallic","Roughness","pointLightSphere","shadowMapTx","ssaoTx","render","EQUAL","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE","cameraViewSpaceToLightCamera","generateDirectionalLightData","modelView","TEMP","depthMask","generatePointLightData","depthFunc","LEQUAL","cullFace","BACK","colorMask","GEQUAL","FRONT","ZERO","renderPointLights","deferredRenderer_SSRRenderer","gbuffer","lightingRenderer","_resultTX","blendShader","fi","targetFB","deferredRenderer_CopierShader","_shader","Mn","TextureToFbCopier","targetFramebuffer","fsq","DeferredRenderer","_config","copierShader","finalToDefaultFB","ssrToDefaultFB","bs","onChangeSSAOState","blend","blendFunc","SRC_ALPHA","fbStatus","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","RENDERBUFFER_SAMPLES","nextId","id","ui_c","className","funcRef","ref","apply","arguments","props","el","document","createElement","setAttribute","for","cb","map","textContent","appendChild","Form","FormGroup","label","FormRow","NumberInput","onChange","onchange","ev","RadioInput","options","eid","checked","CheckBoxInput","QuadVertices","QuadArrayBufferData","FULLSCREEN_QUAD_VS","quad_FullScreenQuad","quadBuffer","setAutodelete","quat_create","slerp","omega","cosom","sinom","scale0","scale1","aw","bw","acos","quat_fromValues","quat_normalize","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","mat3_create","r1to255","trunc","fillTexture2DWithEmptyTexture","defaultColor","srcFormat","srcType","pixel","nv","Uint8Array","vec3ToUnit8Array","ImagePixels","img","LINEAR","LINEAR_MIPMAP_LINEAR","generateMipmap","getDDSFormat","ext","ddsFormat","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","texture_DDSPixels","dds","parse_dds","getExtension","mip","image","compressedTexImage2D","Texture","pixels","promise","then","bindImageToTexture","setupTexture","gltf_m","white","gltf_GLTFLoader","urlPrefix","buffers","bufferViewsIndices","bufferViewsArrays","textures","materials","accessorsIndices","accessorsArrays","urlJoin","suffix","loadBuffer","uri","status","loadBufferViewIndices","bv","bufferViews","glbuf","subarray","loadBufferViewArray","loadAccessorIndices","Promise","resolve","accessors","bufferView","warn","scenes","nodes","nodeId","addChild","toGameObject","mimeType","ok","statusText","reject","Image","src","crossOrigin","addEventListener","loadImage","nm","pbrMetallicRoughness","baseColorFactor","baseColorTexture","setFactor","setTexture","loadTexture","metallicFactor","metallicRoughnessTexture","roughnessFactor","normalTexture","setNormalMap","posAccessor","attributes","all","loadAccessorArrays","pos","node","gameObject","translation","out_axis","q","getAxisAngle","meshes","pi","loadPrimitive","primitiveBB","primitiveGameObject","setBoundingBoxComponent","setMaterialComponent","loadMaterial","isFirst","setComputedFromChildren","child","newGLTFLoader","gltfFilename","json","fetchGLTF","parts","constructUrlBase","originZero","PI2","printError","errE","getElementById","innerText","style","display","main","state","so","io","step","oo","ro","ae","new","_t","ao","ps","ds","fixed","qt","ms","Ce","Ve","Ie","De","He","ho","cs","pause","lo","uo","minFpsE","maxFpsE","currentFpsE","updateFpsHTML","fps","current","toFixed","shouldRotate","lighting","lightCount","sun","getContext","co","initGL","quadArrayBuffer","progressBarCommon","progressBar","contentLength","downloaded","prepare","onHeaders","progress","getArrayBuffer","intoGLArrayBuffer","planeMesh","shadowMapConfig","ssrConfig","updateSSAOConfig","updateShadowMapConfig","updateSSRConfig","renderer","loadScene","loadSceneFromGLTF","newScene","err","setDirectionalLightComponent","delta","lastStart","frame","processFrame","timestamp","pressedKeys","moveSpeed","requestAnimationFrame","zoom","pitch","yaw","window","onkeydown","onkeyup","initialFov","onwheel","ctrlKey","deltaY","shiftKey","deltaX","preventDefault","onSSSAOStateParamsChange","prev","diff","vstring","isPaused","catch"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","// All values and structures referenced from:\n// http://msdn.microsoft.com/en-us/library/bb943991.aspx/\n//\n// DX10 Cubemap support based on\n// https://github.com/dariomanesku/cmft/issues/7#issuecomment-69516844\n// https://msdn.microsoft.com/en-us/library/windows/desktop/bb943983(v=vs.85).aspx\n// https://github.com/playcanvas/engine/blob/master/src/resources/resources_texture.js\n\nvar DDS_MAGIC = 0x20534444\nvar DDSD_MIPMAPCOUNT = 0x20000\nvar DDPF_FOURCC = 0x4\n\nvar FOURCC_DXT1 = fourCCToInt32('DXT1')\nvar FOURCC_DXT3 = fourCCToInt32('DXT3')\nvar FOURCC_DXT5 = fourCCToInt32('DXT5')\nvar FOURCC_DX10 = fourCCToInt32('DX10')\nvar FOURCC_FP32F = 116 // DXGI_FORMAT_R32G32B32A32_FLOAT\n\nvar DDSCAPS2_CUBEMAP = 0x200\nvar D3D10_RESOURCE_DIMENSION_TEXTURE2D = 3\nvar DXGI_FORMAT_R32G32B32A32_FLOAT = 2\n\n// The header length in 32 bit ints\nvar headerLengthInt = 31\n\n// Offsets into the header array\nvar off_magic = 0\nvar off_size = 1\nvar off_flags = 2\nvar off_height = 3\nvar off_width = 4\nvar off_mipmapCount = 7\nvar off_pfFlags = 20\nvar off_pfFourCC = 21\nvar off_caps2 = 28\n\nmodule.exports = parseHeaders\n\nfunction parseHeaders (arrayBuffer) {\n  var header = new Int32Array(arrayBuffer, 0, headerLengthInt)\n\n  if (header[off_magic] !== DDS_MAGIC) {\n    throw new Error('Invalid magic number in DDS header')\n  }\n\n  if (!header[off_pfFlags] & DDPF_FOURCC) {\n    throw new Error('Unsupported format, must contain a FourCC code')\n  }\n\n  var blockBytes\n  var format\n  var fourCC = header[off_pfFourCC]\n  switch (fourCC) {\n    case FOURCC_DXT1:\n      blockBytes = 8\n      format = 'dxt1'\n      break\n    case FOURCC_DXT3:\n      blockBytes = 16\n      format = 'dxt3'\n      break\n    case FOURCC_DXT5:\n      blockBytes = 16\n      format = 'dxt5'\n      break\n    case FOURCC_FP32F:\n      format = 'rgba32f'\n      break\n    case FOURCC_DX10:\n      var dx10Header = new Uint32Array(arrayBuffer.slice(128, 128 + 20))\n      format = dx10Header[0]\n      var resourceDimension = dx10Header[1]\n      var miscFlag = dx10Header[2]\n      var arraySize = dx10Header[3]\n      var miscFlags2 = dx10Header[4]\n\n      if (resourceDimension === D3D10_RESOURCE_DIMENSION_TEXTURE2D && format === DXGI_FORMAT_R32G32B32A32_FLOAT) {\n        format = 'rgba32f'\n      } else {\n        throw new Error('Unsupported DX10 texture format ' + format)\n      }\n      break\n    default:\n      throw new Error('Unsupported FourCC code: ' + int32ToFourCC(fourCC))\n  }\n\n  var flags = header[off_flags]\n  var mipmapCount = 1\n\n  if (flags & DDSD_MIPMAPCOUNT) {\n    mipmapCount = Math.max(1, header[off_mipmapCount])\n  }\n\n  var cubemap = false\n  var caps2 = header[off_caps2]\n  if (caps2 & DDSCAPS2_CUBEMAP) {\n    cubemap = true\n  }\n\n  var width = header[off_width]\n  var height = header[off_height]\n  var dataOffset = header[off_size] + 4\n  var texWidth = width\n  var texHeight = height\n  var images = []\n  var dataLength\n\n  if (fourCC === FOURCC_DX10) {\n    dataOffset += 20\n  }\n\n  if (cubemap) {\n    for (var f = 0; f < 6; f++) {\n      if (format !== 'rgba32f') {\n        throw new Error('Only RGBA32f cubemaps are supported')\n      }\n      var bpp = 4 * 32 / 8\n\n      width = texWidth\n      height = texHeight\n\n      // cubemap should have all mipmap levels defined\n      // Math.log2(width) + 1\n      var requiredMipLevels = Math.log(width) / Math.log(2) + 1\n\n      for (var i = 0; i < requiredMipLevels; i++) {\n        dataLength = width * height * bpp\n        images.push({\n          offset: dataOffset,\n          length: dataLength,\n          shape: [ width, height ]\n        })\n        // Reuse data from the previous level if we are beyond mipmapCount\n        // This is hack for CMFT not publishing full mipmap chain https://github.com/dariomanesku/cmft/issues/10\n        if (i < mipmapCount) {\n          dataOffset += dataLength\n        }\n        width = Math.floor(width / 2)\n        height = Math.floor(height / 2)\n      }\n    }\n  } else {\n    for (var i = 0; i < mipmapCount; i++) {\n      dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes\n\n      images.push({\n        offset: dataOffset,\n        length: dataLength,\n        shape: [ width, height ]\n      })\n      dataOffset += dataLength\n      width = Math.floor(width / 2)\n      height = Math.floor(height / 2)\n    }\n  }\n\n  return {\n    shape: [ texWidth, texHeight ],\n    images: images,\n    format: format,\n    flags: flags,\n    cubemap: cubemap\n  }\n}\n\nfunction fourCCToInt32 (value) {\n  return value.charCodeAt(0) +\n    (value.charCodeAt(1) << 8) +\n    (value.charCodeAt(2) << 16) +\n    (value.charCodeAt(3) << 24)\n}\n\nfunction int32ToFourCC (value) {\n  return String.fromCharCode(\n    value & 0xff,\n    (value >> 8) & 0xff,\n    (value >> 16) & 0xff,\n    (value >> 24) & 0xff\n  )\n}\n","/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2];\n  let bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let x = a[0], y = a[1], z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    let uvx = qy * z - qz * y,\n        uvy = qz * x - qx * z,\n        uvz = qx * y - qy * x;\n    // var uuv = vec3.cross([], qvec, uv);\n    let uuvx = qy * uvz - qz * uvy,\n        uuvy = qz * uvx - qx * uvz,\n        uuvz = qx * uvy - qy * uvx;\n    // vec3.scale(uv, uv, 2 * w);\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let tempA = fromValues(a[0], a[1], a[2]);\n  let tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  let cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2];\n  let b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n","import {ArrayBufferDataType, GLArrayBufferData, GLArrayBufferDataParams} from \"./glArrayBuffer\";\nimport * as vec3 from \"gl-matrix/src/gl-matrix/vec3\";\n\nexport class AxisAlignedBox {\n    private _cacheNeedsUpdate = false;\n    private _vertexBufferCache: GLArrayBufferData = null;\n\n    private _min = vec3.fromValues(-1, -1, -1);\n\n    get min(): vec3 {\n        return this._min;\n    }\n\n    private _max = vec3.fromValues(1, 1, 1);\n\n    get max(): vec3 {\n        return this._max;\n    }\n\n    setMin(v: vec3 | number[]): AxisAlignedBox {\n        vec3.copy(this._min, v);\n        this._cacheNeedsUpdate = true;\n        return this;\n    }\n\n    setMax(v: vec3 | number[]): AxisAlignedBox {\n        vec3.copy(this._max, v);\n        this._cacheNeedsUpdate = true;\n        return this;\n    }\n\n    containsPoint(v: vec3): boolean {\n        return (\n            v[0] > this._min[0] && v[0] < this._max[0]\n            &&\n            v[1] > this._min[1] && v[1] < this._max[1]\n            &&\n            v[2] > this._min[2] && v[3] < this._max[2]\n        );\n    }\n\n    uniqueVertices(): Array<number[]> {\n        const x = 0;\n        const y = 1;\n        const z = 2;\n\n        const dlf = [this._min[x], this._min[y], this._max[z]];\n        const dlb = [this._min[x], this._min[y], this._min[z]];\n\n        const drf = [this._max[x], this._min[y], this._max[z]];\n        const drb = [this._max[x], this._min[y], this._min[z]];\n\n        const urf = [this._max[x], this._max[y], this._max[z]];\n        const urb = [this._max[x], this._max[y], this._min[z]];\n\n        const ulf = [this._min[x], this._max[y], this._max[z]];\n        const ulb = [this._min[x], this._max[y], this._min[z]];\n\n        return [\n            dlf, dlb, drf, drb, urf, urb, ulf, ulb\n        ]\n    }\n\n    asVerticesBuffer(allowCached: boolean = true): GLArrayBufferData {\n        if (allowCached && !this._cacheNeedsUpdate && !!this._vertexBufferCache) {\n            return this._vertexBufferCache;\n        }\n        const params = new GLArrayBufferDataParams(false, false, 8, ArrayBufferDataType.POINTS);\n        params.elementSize = 3;\n        const data = [];\n        for (const v of this.uniqueVertices()) {\n            data.push(...v);\n        }\n        this._vertexBufferCache = new GLArrayBufferData(new Float32Array(data), params);\n        this._cacheNeedsUpdate = false;\n        return this._vertexBufferCache;\n    }\n\n    asWireFrameBuffer(): GLArrayBufferData {\n        const params = new GLArrayBufferDataParams(false, false, 24, ArrayBufferDataType.LINES);\n        params.elementSize = 3;\n\n        const data = [];\n        const [dlf, dlb, drf, drb, urf, urb, ulf, ulb] = this.uniqueVertices();\n\n        // front face edges\n        data.push(\n            ...dlf, ...drf,\n            ...drf, ...urf,\n            ...urf, ...ulf,\n            ...ulf, ...dlf\n        );\n\n        // back face edges\n        data.push(\n            ...dlb, ...drb,\n            ...drb, ...urb,\n            ...urb, ...ulb,\n            ...ulb, ...dlb\n        );\n\n        // top left edge\n        data.push(...ulf, ...ulb);\n\n        // top right edge\n        data.push(...urf, ...urb);\n\n        // bootom left edge\n        data.push(...dlf, ...dlb);\n\n        // bottom right edge\n        data.push(...drf, ...drb);\n        return new GLArrayBufferData(new Float32Array(data), params);\n    }\n}\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  let x = a[0], y = a[1], z = a[2];\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n","export const GLTF = {\n    TRIANGLES: 4,\n    COMPONENT_TYPES_TO_GL_TYPE: {\n        5120: WebGL2RenderingContext.BYTE,\n        5121: WebGL2RenderingContext.UNSIGNED_BYTE,\n        5122: WebGL2RenderingContext.SHORT,\n        5123: WebGL2RenderingContext.UNSIGNED_SHORT,\n        5125: WebGL2RenderingContext.UNSIGNED_INT,\n        5126: WebGL2RenderingContext.FLOAT,\n    }\n};\n","export const ATTRIBUTE_POSITION = \"a_pos\";\nexport const ATTRIBUTE_POSITION_LOC = 0;\nexport const ATTRIBUTE_NORMALS = \"a_norm\";\nexport const ATTRIBUTE_NORMALS_LOC = 1;\nexport const ATTRIBUTE_UV = \"a_uv\";\nexport const ATTRIBUTE_UV_LOC = 2;\nexport const ATTRIBUTE_TANGENT = \"a_tangent\";\nexport const ATTRIBUTE_TANGENT_LOC = 3;\nexport const UNIFORM_CAMERA_POSITION = \"u_cameraPos\";\nexport const UNIFORM_WORLD_TO_CAMERA_MAT4 = \"u_worldToCameraMatrix\";\nexport const UNIFORM_CAMERA_TO_WORLD_MAT4 = \"u_cameraToWorldMatrix\";\nexport const UNIFORM_PERSPECTIVE_MATRIX = \"u_perspectiveMatrix\";\nexport const UNIFORM_MODEL_WORLD_MATRIX = \"u_modelWorldMatrix\";\nexport const UNIFORM_MODEL_VIEW_MATRIX = \"u_modelViewMatrix\";\nexport const UNIFORM_GBUF_POSITION = \"gbuf_position\";\nexport const UNIFORM_GBUF_NORMAL = \"gbuf_normal\";\nexport const UNIFORM_GBUF_ALBEDO = \"gbuf_colormap\";\nexport const UNIFORM_GBUF_MR = \"gbuf_metallic_roughness\";\nexport const UNIFORM_HAS_TANGENT = \"u_hasTangent\";\n\nexport const SAMPLE_GLTF_SPONZA = \"https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Sponza/glTF/Sponza.gltf\";\n\n// DDS variant produced like this:\n// cat Sponza.gltf | sed -E 's/\\.(jpg|png)/.\\1.dds/g' | sed -E 's/(image\\/jpeg|image\\/png)/image\\/vnd-ms.dds/g' > Sponza-dds.gltf\nexport const SAMPLE_GLTF_SPONZA_DDS = \"https://raw.githubusercontent.com/ikatson/glTF-Sample-Models/master/2.0/Sponza/glTF/Sponza-dds.gltf\";\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a03 = a[3];\n    let a12 = a[6], a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0], by = -a[1], bz = -a[2], bw = a[3],\n  ax = a[4], ay = a[5], az = a[6], aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2), nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = (2 * far * near) * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  let len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  len = x0*x0 + x1*x1 + x2*x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as vec3 from \"gl-matrix/src/gl-matrix/vec3\";\nimport * as mat4 from \"gl-matrix/src/gl-matrix/mat4\";\nimport {tmpIdentityMatrix} from \"./utils\";\n\nconst tmpVec3: vec3 = vec3.create();\n\nexport class ProjectionMatrix {\n    near: number;\n    far: number;\n    matrix: any;\n\n    constructor(near: number, far: number, matrix: any) {\n        this.near = near;\n        this.far = far;\n        this.matrix = matrix;\n    }\n}\n\nexport class Camera {\n    near: number;\n    far: number;\n    fov: number;\n    aspect: number;\n    private _right: vec3 = vec3.create();\n    private _projectionMatrix: any;\n    private _worldToCamera: any;\n\n    private _camToWorldNeedsUpdate: boolean = true;\n    private _worldToCamNeedsUpdate: boolean = true;\n    private _cameraToWorld: mat4;\n    private _projectionMatrixNeedsUpdate: boolean = true;\n\n    constructor(aspect: number = 1) {\n        this._position = vec3.fromValues(0, 0, -1);\n        this._forward = vec3.fromValues(0, 0, 1);\n        this._up = vec3.fromValues(0, 1, 0);\n        this._right = vec3.create();\n        this.near = 0.1;\n        this.far = 15.0;\n        this.fov = 45.;\n        this.aspect = aspect;\n        this._projectionMatrix = mat4.create();\n        this._worldToCamera = mat4.create();\n        this._cameraToWorld = mat4.create();\n    }\n\n    private _position: vec3;\n\n    get position(): vec3 {\n        return this._position;\n    }\n\n    set position(value: vec3) {\n        this._position = value;\n        this.update();\n    }\n\n    private _forward: vec3;\n\n    get forward(): vec3 {\n        return this._forward;\n    }\n\n    set forward(value: vec3) {\n        this._forward = value;\n        this.update();\n    }\n\n    private _up: vec3;\n\n    get up(): vec3 {\n        return this._up;\n    }\n\n    set up(value: vec3) {\n        this._up = value;\n        this.update();\n    }\n\n    setFar(v: number): Camera {\n        this.far = v;\n        return this;\n    }\n\n    update() {\n        this._camToWorldNeedsUpdate = true;\n        this._worldToCamNeedsUpdate = true;\n        this._projectionMatrixNeedsUpdate = true;\n    }\n\n    getWorldToCamera() {\n        if (this._worldToCamNeedsUpdate) {\n            this.computeWorldToCamera();\n            this._worldToCamNeedsUpdate = false;\n        }\n        return this._worldToCamera;\n    }\n\n    getCameraToWorld() {\n        if (this._camToWorldNeedsUpdate) {\n            this.computeCameraToWorld();\n            this._camToWorldNeedsUpdate = false;\n        }\n        return this._cameraToWorld;\n    }\n\n    right() {\n        vec3.cross(this._right, this._forward, this._up);\n        return this._right;\n    }\n\n    projectionMatrix(): ProjectionMatrix {\n        if (this._projectionMatrixNeedsUpdate) {\n            mat4.perspective(this._projectionMatrix, this.fov * Math.PI / 180.0, this.aspect, this.near, this.far);\n            this._projectionMatrixNeedsUpdate = false;\n        }\n        return new ProjectionMatrix(this.near, this.far, this._projectionMatrix);\n    }\n\n    calculateUpFromWorldUp() {\n        // determine up direction\n        const worldUp = [0, 1., 0];\n        vec3.scale(tmpVec3, this.forward, vec3.dot(worldUp, this.forward));\n        vec3.sub(this.up, worldUp, tmpVec3);\n        vec3.normalize(this.up, this.up);\n        this.update();\n    }\n\n    clone(target?: Camera) {\n        const c = target || new Camera();\n        vec3.copy(c.position, this.position);\n        vec3.copy(c.forward, this.forward);\n        vec3.copy(c.up, this.up);\n        c.near = this.near;\n        c.far = this.far;\n        c.aspect = this.aspect;\n        c.update();\n        return c;\n    }\n\n    private computeWorldToCamera() {\n        const m = this._worldToCamera;\n        const r = this.right();\n        mat4.set(m,\n            r[0], this.up[0], -this.forward[0], 0,\n            r[1], this.up[1], -this.forward[1], 0,\n            r[2], this.up[2], -this.forward[2], 0,\n            0, 0, 0, 1,\n        );\n        vec3.scale(tmpVec3, this.position, -1);\n        mat4.translate(m, m, tmpVec3);\n        return m;\n    }\n\n    private computeCameraToWorld() {\n        // This will essentially be equivalent to the inverset of getWorldToCamera(),\n        // but it's much easier to compute by hand instead of inverse.\n        const m = this._cameraToWorld;\n        mat4.fromTranslation(m, this.position);\n\n        const r = this.right();\n        const mr = tmpIdentityMatrix();\n        mat4.set(mr,\n            r[0], r[1], r[2], 0,\n            this.up[0], this.up[1], this.up[2], 0,\n            -this.forward[0], -this.forward[1], -this.forward[2], 0,\n            0, 0, 0, 1\n        );\n        mat4.multiply(m, m, mr);\n        return m;\n    }\n}\n","import * as vec3 from \"gl-matrix/src/gl-matrix/vec3\";\nimport * as mat4 from \"gl-matrix/src/gl-matrix/mat4\";\nimport * as vec4 from \"gl-matrix/src/gl-matrix/vec4\";\nimport {fetchObject, ObjParser} from \"./objparser\";\nimport {computeBoundingBox, GLArrayBufferData, tmpIter} from \"./glArrayBuffer\";\nimport {Camera, ProjectionMatrix} from \"./camera\";\nimport {AxisAlignedBox} from \"./axisAlignedBox\";\nimport {Scene} from \"./scene\";\nimport {DirectionalLight, GameObject} from \"./object\";\n\nexport function initGL(canvas: HTMLCanvasElement): WebGL2RenderingContext {\n    let gl = <WebGL2RenderingContext>canvas.getContext(\"webgl2\", {\n        antialias: false,\n    });\n    gl.getExtension(\"EXT_color_buffer_float\");\n\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    return gl;\n}\n\nexport const clip = (v: number, min: number, max: number): number => {\n    if (v < min) {\n        return min;\n    }\n    if (v > max) {\n        return max;\n    }\n    return v;\n};\n\nexport const clamp = clip;\n\nexport function lerp(v, a, b, c, d) {\n    return c + v / (b - a) * (d - c);\n}\n\nexport function randFloat(min, max) {\n    const v = Math.random();\n    return lerp(v, 0, 1, min, max);\n}\n\nexport function randVec3(min: number, max: number): vec3 {\n    return vec3.fromValues(randFloat(min, max), randFloat(min, max), randFloat(min, max));\n}\n\nexport function makeObjLoader(name: string) {\n    let sphere: Promise<ObjParser> = null;\n    return function loadObject() {\n        if (sphere) {\n            return sphere;\n        }\n        sphere = fetchObject(name);\n        return sphere;\n    }\n}\n\nexport function cacheOnFirstUse<T>(factory: () => T): () => T {\n    let obj: T = null;\n    return (): T => {\n        if (obj === null) {\n            obj = factory();\n        }\n        return obj;\n    };\n}\n\nexport function makeCache<T>(factory: () => T): (index: number) => T {\n    let cache: T[] = new Array(1);\n    return (index: number): T => {\n        if (cache[index] === undefined) {\n            cache[index] = factory();\n        }\n        return cache[index];\n    };\n}\n\nexport const loadSphere = makeObjLoader('resources/sphere.obj');\nexport const loadCube = makeObjLoader('resources/cube.obj');\n\nexport const tmpMat4 = mat4.create();\nexport const tmpVec3 = vec3.create();\nexport const tmpVec4 = vec4.create();\nexport const tmpBoundingBoxCache = makeCache(() => new AxisAlignedBox());\nexport const tmpIdentityMatrix = (function () {\n    const m = mat4.create();\n    return () => {\n        mat4.identity(m);\n        return m;\n    }\n})();\n\n\nexport const makeWorldSpaceCameraFrustum = (() => {\n    const identityAABB = cacheOnFirstUse(() => new AxisAlignedBox());\n    const identityAABBVertexBuffer = cacheOnFirstUse(() => new Float32Array(8 * 3));\n    const identityAABBWireframeBuffer = cacheOnFirstUse(() => new Float32Array(24 * 3));\n\n    return (camera: Camera, pointsOnly: boolean = false, isTemporary: boolean = true): GLArrayBufferData => {\n        const camToWorld = camera.getCameraToWorld();\n        let cubeVertices: GLArrayBufferData;\n        if (pointsOnly) {\n            cubeVertices = identityAABB().asVerticesBuffer();\n        } else {\n            cubeVertices = identityAABB().asWireFrameBuffer();\n        }\n\n        mat4.invert(tmpMat4, camera.projectionMatrix().matrix);\n\n        let data: Float32Array;\n        if (isTemporary) {\n            if (pointsOnly) {\n                data = identityAABBVertexBuffer();\n            } else {\n                data = identityAABBWireframeBuffer();\n            }\n        } else {\n            if (pointsOnly) {\n                data = new Float32Array(8 * 3);\n            } else {\n                data = new Float32Array(24 * 3);\n            }\n        }\n\n        for (const it of cubeVertices.iterator(tmpIter)) {\n            const v = tmpVec4;\n            const l = it.ve - it.vs;\n            if (l != 3) {\n                throw new Error('unsupported length of cubeVertices, should be 3');\n            }\n\n            v[0] = cubeVertices.buf[it.vs];\n            v[1] = cubeVertices.buf[it.vs + 1];\n            v[2] = cubeVertices.buf[it.vs + 2];\n            v[3] = 1;\n\n            vec4.transformMat4(v, v, tmpMat4);\n            vec4.scale(v, v, 1. / v[3]);\n            vec4.transformMat4(v, v, camToWorld);\n\n            data[it.vs] = v[0];\n            data[it.vs + 1] = v[1];\n            data[it.vs + 2] = v[2];\n        }\n\n        return new GLArrayBufferData(data, cubeVertices.params);\n    };\n})();\n\nexport const makeDirectionalLightWorldToCameraMatrix = (() => {\n    const tmpCamera = new Camera();\n    return (direction: vec3): any => {\n        // A new \"camera\" IS NOT needed here, but we only need the world to camera matrix from it.\n        tmpCamera.forward = direction;\n        tmpCamera.calculateUpFromWorldUp();\n        tmpCamera.update();\n        return tmpCamera.getWorldToCamera();\n    }\n})();\n\nexport const orthoProjection = (out, left, right, bottom, top, near, far) => {\n    const fn = 1. / (far - near);\n    const tb = 1. / (top - bottom);\n    const rl = 1. / (right - left);\n    mat4.set(out,\n        2 * rl, 0, 0, 0,\n        0, 2 * tb, 0, 0,\n        0, 0, -2 * fn, 0,\n        -(right + left) * rl, -(bottom + top) * tb, (far + near) * fn, 1,\n    );\n};\n\nexport const computeBoundingBoxInTransformedSpace = (() => {\n    const tmpBoundingBoxVerticesBuf = cacheOnFirstUse(() => new AxisAlignedBox().asVerticesBuffer());\n    const tmpVec1 = new Array(1);\n    const tmpVec3_2 = vec3.create();\n    const bb = makeCache(() => new AxisAlignedBox());\n\n    return (scene: Scene, transform: mat4, objFilter: (o: GameObject) => boolean = null, target: AxisAlignedBox = null, includePointLights: boolean = false): AxisAlignedBox => {\n        let allBB: AxisAlignedBox = null;\n        objFilter = objFilter || (_ => true);\n\n        const bboxForChildInTransformedSpace = (o: GameObject) => {\n            // only process children's bounding boxes if the current object does not have a bounding box computed\n            // from children.\n            if (!o.boundingBoxComponent || !o.boundingBoxComponent.computedFromChildren) {\n                o.children.forEach(bboxForChildInTransformedSpace);\n            }\n\n            if (!(o.boundingBoxComponent && objFilter(o))) {\n                return;\n            }\n\n            mat4.mul(tmpMat4, transform, o.transform.getModelToWorld());\n\n            const objLSBoundingBox = o.boundingBoxComponent.box.asVerticesBuffer(true)\n                .translateTo(tmpMat4, tmpBoundingBoxVerticesBuf())\n                .computeBoundingBox(bb(0));\n\n            if (allBB === null) {\n                allBB = target || bb(1);\n                allBB.setMin(objLSBoundingBox.min);\n                allBB.setMax(objLSBoundingBox.max);\n            } else {\n                tmpVec1[0] = objLSBoundingBox;\n                allBB = computeBoundingBox(tmpVec1, false, allBB, allBB);\n            }\n        };\n\n        scene.children.forEach(bboxForChildInTransformedSpace);\n\n        // this is inefficient and incorrect, but works around artifacts with point lights.\n        if (allBB && includePointLights) {\n            scene.pointLights.forEach(l => {\n                vec3.transformMat4(tmpVec3, l.object.transform.position, transform);\n                const b = bb(0);\n                const offset = l.radius + 0.1;\n                b.setMin(vec3.set(tmpVec3_2, tmpVec3[0] - offset, tmpVec3[1] - offset, tmpVec3[2] - offset));\n                b.setMax(vec3.set(tmpVec3_2, tmpVec3[0] + offset, tmpVec3[1] + offset, tmpVec3[2] + offset));\n\n                tmpVec1[0] = b;\n                allBB = computeBoundingBox(tmpVec1, false, allBB, allBB);\n            });\n        }\n\n        if (allBB === null) {\n            allBB = target || bb(1);\n        }\n        return allBB;\n    };\n})();\n\nexport const optimizeNearFar = (\n    camera: Camera, scene: Scene,\n    minNear: number = 0.1, minFar: number = 1.,\n    objFilter: (o: GameObject) => boolean = null\n): Camera => {\n    const bb = computeBoundingBoxInTransformedSpace(\n        scene, camera.getWorldToCamera(), objFilter, tmpBoundingBoxCache(0), true\n    );\n    camera.near = Math.max(minNear, -bb.max[2]);\n    camera.far = Math.max(minFar, -bb.min[2]);\n    camera.update();\n    return camera;\n};\n\nexport const tmpProjectionMatrix = new ProjectionMatrix(0, 1, mat4.create());\nexport const computeDirectionalLightCameraWorldToProjectionMatrix = (() => {\n    const bb = tmpBoundingBoxCache;\n\n    return (light: DirectionalLight, camera: Camera, scene: Scene, out?: ProjectionMatrix): ProjectionMatrix => {\n        const worldToLightViewSpace = makeDirectionalLightWorldToCameraMatrix(light.direction);\n        out = out || new ProjectionMatrix(0, 1, mat4.create());\n\n        let cameraFrustumBB = makeWorldSpaceCameraFrustum(\n            camera,\n            true, true\n        )\n            .translateInPlace(worldToLightViewSpace)\n            .computeBoundingBox(bb(0));\n\n        let allBB = computeBoundingBoxInTransformedSpace(\n            scene, worldToLightViewSpace, o => o.mesh ? o.mesh.shadowCaster : true, bb(2)\n        );\n\n        if (allBB === null) {\n            allBB = bb(2);\n        }\n\n        const lightClipSpaceMatrix = tmpMat4;\n\n        const x = 0;\n        const y = 1;\n        const z = 2;\n\n        const left = Math.max(allBB.min[x], cameraFrustumBB.min[x]);\n        const right = Math.min(allBB.max[x], cameraFrustumBB.max[x]);\n\n        const bottom = Math.max(allBB.min[y], cameraFrustumBB.min[y]);\n        const top = Math.min(allBB.max[y], cameraFrustumBB.max[y]);\n\n        // note Z is reversed here\n        const near = allBB.min[z];\n        const far = allBB.max[z];\n\n        orthoProjection(lightClipSpaceMatrix, left, right, bottom, top, near, far);\n        mat4.multiply(out.matrix, lightClipSpaceMatrix, worldToLightViewSpace);\n        out.near = near;\n        out.far = far;\n        return out;\n    };\n})();\n\n\nexport function hexToRgb1(out: vec4, hex: string): vec4 {\n    const bigint = parseInt(hex.slice(1, hex.length), 16);\n    const r = (bigint >> 16) & 255;\n    const g = (bigint >> 8) & 255;\n    const b = bigint & 255;\n\n    out[0] = r / 256;\n    out[1] = g / 256;\n    out[2] = b / 256;\n    out[3] = 1.;\n    return out;\n}\n\nexport function rgbToHex(r, g, b) {\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n}\n\nexport function mapComputeIfAbsent<K, V>(m: Map<K, V>, key: K, callback: (K) => V): V {\n    if (m.has(key)) {\n        return m.get(key);\n    }\n    const v = callback(key);\n    m.set(key, v);\n    return v;\n}\n","import {AxisAlignedBox} from \"./axisAlignedBox\";\nimport * as vec3 from \"gl-matrix/src/gl-matrix/vec3\";\nimport * as mat4 from \"gl-matrix/src/gl-matrix/mat4\";\nimport * as vec4 from \"gl-matrix/src/gl-matrix/vec4\";\nimport {Accessor} from \"./gltf-types\";\nimport {GLTF} from \"./gltf-enums\";\nimport {ATTRIBUTE_NORMALS_LOC, ATTRIBUTE_POSITION_LOC, ATTRIBUTE_TANGENT_LOC, ATTRIBUTE_UV_LOC,} from \"./constants\";\nimport {tmpVec3} from \"./utils\";\n\nconst FLOAT_BYTES = 4;\nconst VEC3 = 3;\nconst VEC4 = 4;\nconst UV_SIZE = 2;\n\nconst tmpVec1 = new Array(1);\nconst tmpVec4 = vec4.create();\n\nexport enum ArrayBufferDataType {\n    TRIANGLES = WebGL2RenderingContext.TRIANGLES,\n    LINES = WebGL2RenderingContext.LINES,\n    LINE_STRIP = WebGL2RenderingContext.LINE_STRIP,\n    POINTS = WebGL2RenderingContext.POINTS,\n    TRIANGLE_STRIP = WebGL2RenderingContext.TRIANGLE_STRIP,\n}\n\nexport function ArrayBufferDataTypeToGL(a: ArrayBufferDataType) {\n    return a;\n}\n\nexport class GLArrayBufferDataParams {\n    // how many floats per element\n    elementSize: number = VEC4;\n    normalsSize: number = VEC4;\n    uvSize: number = UV_SIZE;\n\n    hasNormals: boolean;\n    hasUVs: boolean;\n    vertexCount: number;\n\n    dataType: ArrayBufferDataType = ArrayBufferDataType.TRIANGLES;\n\n    constructor(hasNormals: boolean, hasUVs: boolean, vertexCount: number, dataType: ArrayBufferDataType) {\n        this.hasNormals = hasNormals;\n        this.hasUVs = hasUVs;\n        this.vertexCount = vertexCount;\n        this.dataType = dataType || this.dataType;\n    }\n\n    computeStrideInElements() {\n        return this.computeStrideInBytes() / FLOAT_BYTES;\n    }\n\n    computeStrideInBytes() {\n        let size = this.elementSize * FLOAT_BYTES;\n        if (this.hasNormals) {\n            size += this.normalsSize * FLOAT_BYTES;\n        }\n        if (this.hasUVs) {\n            size += this.uvSize * FLOAT_BYTES;\n        }\n        return size;\n    }\n\n    computeNormalOffset() {\n        return FLOAT_BYTES * this.elementSize;\n    }\n\n    computeUVOffset() {\n        return this.computeNormalOffset() + (this.hasNormals ? this.normalsSize * FLOAT_BYTES : 0);\n    }\n}\n\ntype DataOrBoundingBox = GLArrayBufferData | AxisAlignedBox;\n\nexport const computeBoundingBox = (() => {\n    const min = vec3.create();\n    const max = vec3.create();\n\n    const compareAndSet = (out: number[] | Float32Array, inp: number[] | Float32Array, offset: number, f: (v: number, v1: number) => (number)) => {\n        for (let i = 0; i < out.length; i++) {\n            out[i] = f(out[i], inp[offset + i]);\n        }\n    };\n    return (objects: DataOrBoundingBox[], invertZ: boolean = false, target?: AxisAlignedBox, start?: AxisAlignedBox): AxisAlignedBox => {\n        target = target || new AxisAlignedBox();\n\n        if (start) {\n            vec3.copy(min, start.min);\n            vec3.copy(max, start.max);\n        } else {\n            vec3.set(min, Infinity, Infinity, Infinity);\n            vec3.set(max, -Infinity, -Infinity, -Infinity);\n        }\n        for (let i = 0; i < objects.length; i++) {\n            const o = objects[i];\n            if (o === null) {\n                continue;\n            }\n            if (o instanceof GLArrayBufferData) {\n                for (const it of o.iterator(tmpIter)) {\n                    compareAndSet(min, o.buf, it.vs, Math.min);\n                    compareAndSet(max, o.buf, it.vs, Math.max);\n                }\n            } else if (o instanceof AxisAlignedBox) {\n                compareAndSet(min, o.min, 0, Math.min);\n                compareAndSet(max, o.max, 0, Math.max);\n            }\n        }\n\n        target.setMin(min);\n        target.setMax(max);\n        return target;\n    };\n})();\n\nexport class GLArrayBufferData {\n    buf: Float32Array;\n    params: GLArrayBufferDataParams;\n\n    constructor(buf: Float32Array, params: GLArrayBufferDataParams) {\n        this.buf = buf;\n        this.params = params;\n    }\n\n    intoGLArrayBuffer(gl: WebGL2RenderingContext): GLArrayBufferV1 {\n        return new GLArrayBufferV1(gl, this);\n    }\n\n    translate(matrix: mat4): GLArrayBufferData {\n        const result = new GLArrayBufferData(new Float32Array(this.buf.length), this.params);\n        return this.translateTo(matrix, result);\n    }\n\n    translateInPlace(matrix: mat4): GLArrayBufferData {\n        this.translateToBuf(matrix, this.buf);\n        return this;\n    }\n\n    translateToBuf(matrix: mat4, result: Float32Array): Float32Array {\n        for (const it of this.iterator(tmpIter)) {\n            let l = it.ve - it.vs;\n            if (l === 3) {\n                tmpVec3[0] = this.buf[it.vs];\n                tmpVec3[1] = this.buf[it.vs + 1];\n                tmpVec3[2] = this.buf[it.vs + 2];\n                vec3.transformMat4(tmpVec3, tmpVec3, matrix);\n                result.set(tmpVec3, it.vs);\n            } else {\n                tmpVec4[0] = this.buf[it.vs];\n                tmpVec4[1] = this.buf[it.vs + 1];\n                tmpVec4[2] = this.buf[it.vs + 2];\n                tmpVec4[3] = this.buf[it.vs + 3];\n                vec4.transformMat4(tmpVec4, tmpVec4, matrix);\n                result.set(tmpVec4, it.vs);\n            }\n\n            // TODO: translate normals. this just copies normals and uvs back\n            for (let i = it.ns; i < it.ue; i++) {\n                result[i] = this.buf[i];\n            }\n        }\n        return result;\n    }\n\n    translateTo(matrix: mat4, result: GLArrayBufferData): GLArrayBufferData {\n        this.translateToBuf(matrix, result.buf);\n        result.params = this.params;\n        return result;\n    }\n\n    computeBoundingBox(target?: AxisAlignedBox): AxisAlignedBox {\n        tmpVec1[0] = this;\n        return computeBoundingBox(tmpVec1, false, target);\n    }\n\n    iterator(outIter?: GlArrayBufferDataIterator) {\n        outIter = outIter || new GlArrayBufferDataIterator(this);\n        outIter.initialize(this);\n        return outIter;\n    }\n}\n\nexport class GlArrayBufferDataIterator {\n    data: GLArrayBufferData;\n    currentVertex: number = -1;\n\n    vs: number;\n    ve: number;\n    ns: number;\n    ne: number;\n    us: number;\n    ue: number;\n\n    constructor(data: GLArrayBufferData) {\n        this.initialize(data);\n    }\n\n    get done(): boolean {\n        return this.currentVertex >= this.data.params.vertexCount;\n    }\n\n    get value(): GlArrayBufferDataIterator {\n        if (!this.done) {\n            return this;\n        }\n        return null;\n    }\n\n    initialize(data: GLArrayBufferData) {\n        this.data = data;\n        this.currentVertex = -1;\n    }\n\n    computeOffsets() {\n        const p = this.data.params;\n        const offset = this.currentVertex * p.computeStrideInElements();\n        const noffset = offset + p.elementSize;\n        const uvoffset = p.hasNormals ? noffset + p.normalsSize : noffset;\n\n        this.vs = offset;\n        this.ve = offset + p.elementSize;\n        this.ns = noffset;\n        this.ne = p.hasNormals ? noffset + p.normalsSize : noffset;\n        this.us = uvoffset;\n        this.ue = p.hasUVs ? uvoffset + p.uvSize : uvoffset;\n    }\n\n    [Symbol.iterator]() {\n        return this;\n    }\n\n    next(): GlArrayBufferDataIterator {\n        this.currentVertex++;\n        this.computeOffsets();\n        return this;\n    }\n}\n\nexport const tmpIter = new GlArrayBufferDataIterator(null);\n\nexport interface GLArrayBufferI {\n    getBoundingBox(): AxisAlignedBox\n\n    hasNormals(): boolean;\n\n    hasUV(): boolean;\n\n    hasTangent(): boolean;\n\n    draw(gl: WebGL2RenderingContext, renderMode?: number): void;\n\n    delete(gl: WebGL2RenderingContext): void;\n}\n\n\nexport class ArrayWebGLBufferWrapper implements WebGLBufferI {\n    private _buf: WebGLBuffer;\n\n    constructor(gl: WebGL2RenderingContext, data: ArrayBuffer) {\n        this._buf = gl.createBuffer();\n        gl.bindVertexArray(null);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._buf);\n        gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n    }\n\n    buf(): WebGLBuffer {\n        return this._buf;\n    }\n\n    delete(gl: WebGL2RenderingContext) {\n        gl.deleteBuffer(this._buf);\n        this._buf = null;\n    }\n\n    target(): GLenum {\n        return WebGL2RenderingContext.ELEMENT_ARRAY_BUFFER;\n    }\n}\n\nexport interface WebGLBufferI {\n    buf(): WebGLBuffer\n\n    target(): GLenum\n}\n\nexport class ElementArrayWebGLBufferWrapper implements WebGLBufferI {\n    private _buf: WebGLBuffer;\n\n    constructor(gl: WebGL2RenderingContext, data: ArrayBuffer) {\n        this._buf = gl.createBuffer();\n        gl.bindVertexArray(null);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._buf);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW);\n    }\n\n    buf() {\n        return this._buf;\n    }\n\n    delete(gl: WebGL2RenderingContext) {\n        gl.deleteBuffer(this._buf);\n        this._buf = null;\n    }\n\n    target(): GLenum {\n        return WebGL2RenderingContext.ELEMENT_ARRAY_BUFFER;\n    }\n}\n\nexport class BufferView<T extends WebGLBufferI> {\n    constructor(buf: T, byteLength: number, byteOffset: number = 0, byteStride: number = 0) {\n        this._buf = buf;\n        this._byteLength = byteLength;\n        this._byteOffset = byteOffset;\n        this._byteStride = byteStride;\n    }\n\n    private _byteLength: number;\n\n    get byteLength(): number {\n        return this._byteLength;\n    }\n\n    private _byteOffset: number;\n\n    get byteOffset(): number {\n        return this._byteOffset;\n    }\n\n    private _byteStride: number;\n\n    get byteStride(): number {\n        return this._byteStride;\n    }\n\n    private _buf: T;\n\n    get buf(): T {\n        return this._buf;\n    }\n}\n\nexport class GLTFAccessor<T extends WebGLBufferI> {\n    constructor(accessor: Accessor, data: BufferView<T>) {\n        this._accessor = accessor;\n        this._data = data;\n    }\n\n    private _accessor: Accessor;\n\n    get accessor(): Accessor {\n        return this._accessor;\n    }\n\n    private _data: BufferView<T>;\n\n    get data(): BufferView<T> {\n        return this._data;\n    }\n\n    get webGlBuf(): WebGLBuffer {\n        return this.data.buf.buf();\n    }\n\n    componentTypeToGlType(): GLint {\n        return GLTF.COMPONENT_TYPES_TO_GL_TYPE[this._accessor.componentType];\n    }\n\n    numberOfComponents(): GLint {\n        switch (this._accessor.type) {\n            case \"SCALAR\":\n                return 1;\n            case \"VEC2\":\n                return 2;\n            case \"VEC3\":\n                return 3;\n            case \"VEC4\":\n                return 4;\n            case \"MAT2\":\n                return 4;\n            case \"MAT3\":\n                return 9;\n            case \"MAT4\":\n                return 16;\n            default:\n                throw new Error(`Unknown type ${this._accessor.type}`)\n        }\n    }\n\n    setupVertexPointer(gl: WebGL2RenderingContext, attribLocation: number) {\n        if (attribLocation === -1) {\n            return;\n        }\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.webGlBuf);\n        gl.enableVertexAttribArray(attribLocation);\n        gl.vertexAttribPointer(\n            attribLocation,\n            this.numberOfComponents(),\n            this.componentTypeToGlType(),\n            this.accessor.normalized || false,\n            this.data.byteStride,\n            (this.data.byteOffset || 0) + (this.accessor.byteOffset || 0),\n        );\n    }\n}\n\nexport class GLArrayBufferGLTF implements GLArrayBufferI {\n    private indices: GLTFAccessor<ElementArrayWebGLBufferWrapper>;\n    private position: GLTFAccessor<ArrayWebGLBufferWrapper>;\n    private uv: GLTFAccessor<ArrayWebGLBufferWrapper>;\n    private normal: GLTFAccessor<ArrayWebGLBufferWrapper>;\n    private tangent: GLTFAccessor<ArrayWebGLBufferWrapper>;\n    private bb: AxisAlignedBox;\n    private vao: WebGLVertexArrayObject;\n\n    constructor(\n        gl: WebGL2RenderingContext,\n        indices: GLTFAccessor<ElementArrayWebGLBufferWrapper>,\n        position: GLTFAccessor<ArrayWebGLBufferWrapper>,\n        uv: GLTFAccessor<ArrayWebGLBufferWrapper>,\n        normal: GLTFAccessor<ArrayWebGLBufferWrapper>,\n        tangent: GLTFAccessor<ArrayWebGLBufferWrapper>,\n        boundingBox: AxisAlignedBox,\n    ) {\n        this.indices = indices;\n        this.position = position;\n        this.uv = uv;\n        this.normal = normal;\n        this.tangent = tangent;\n        this.vao = this.prepareVAO(gl);\n        this.bb = boundingBox;\n    }\n\n    getBoundingBox(): AxisAlignedBox {\n        return this.bb;\n    }\n\n    delete(gl: WebGL2RenderingContext): void {\n        console.log('delete called on GLArrayBufferGLTF, not sure what to do')\n    }\n\n    draw(gl: WebGL2RenderingContext, renderMode?: number): void {\n        if (renderMode === undefined) {\n            renderMode = gl.TRIANGLES;\n        }\n\n        gl.bindVertexArray(this.vao);\n\n        if (this.indices) {\n            gl.drawElements(\n                renderMode,\n                this.indices.accessor.count,\n                this.indices.componentTypeToGlType(),\n                this.indices.accessor.byteOffset\n            );\n        } else {\n            gl.drawArrays(\n                renderMode,\n                0,\n                this.position.accessor.count,\n            );\n        }\n    }\n\n    hasNormals(): boolean {\n        return !!this.normal;\n    }\n\n    hasTangent(): boolean {\n        return !!this.tangent;\n    }\n\n    hasUV(): boolean {\n        return !!this.uv;\n    }\n\n    private prepareVAO(gl: WebGL2RenderingContext): WebGLVertexArrayObject {\n        const arr = gl.createVertexArray();\n        try {\n            gl.bindVertexArray(arr);\n\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indices.webGlBuf);\n\n            const normals = !!this.normal;\n            const uv = !!this.uv;\n            const tangent = !!this.tangent;\n\n            this.setupVertexPositionsPointer(gl, ATTRIBUTE_POSITION_LOC);\n            if (normals) {\n                this.setupVertexNormalsPointer(gl, ATTRIBUTE_NORMALS_LOC);\n            }\n            if (uv) {\n                this.setupVertexUVPointer(gl, ATTRIBUTE_UV_LOC);\n            }\n            if (tangent) {\n                this.setupTangentPointer(gl, ATTRIBUTE_TANGENT_LOC);\n            }\n        } catch (e) {\n            gl.deleteVertexArray(arr);\n            throw e;\n        }\n        return arr;\n    }\n\n    private setupVertexNormalsPointer(gl, attribLocation): void {\n        this.normal.setupVertexPointer(gl, attribLocation);\n    }\n\n    private setupVertexPositionsPointer(gl, attribLocation): void {\n        this.position.setupVertexPointer(gl, attribLocation);\n    }\n\n    private setupVertexUVPointer(gl, attribLocation): void {\n        this.uv.setupVertexPointer(gl, attribLocation);\n    }\n\n    private setupTangentPointer(gl: WebGL2RenderingContext, attribLocation: number) {\n        this.tangent.setupVertexPointer(gl, attribLocation);\n    }\n}\n\nexport class GLArrayBufferV1 implements GLArrayBufferI {\n    buffer: WebGLBuffer;\n    params: GLArrayBufferDataParams;\n    private vao: WebGLVertexArrayObject;\n    private bb: AxisAlignedBox;\n\n    constructor(gl: WebGL2RenderingContext, data: GLArrayBufferData, usage?: number) {\n        if (usage === undefined) {\n            usage = gl.STATIC_DRAW;\n        }\n        this.buffer = gl.createBuffer();\n        this.params = data.params;\n        this.vao = this.parepareVAO(gl);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, data.buf, usage);\n        gl.bindVertexArray(null);\n        this.bb = data.computeBoundingBox();\n    }\n\n    getBoundingBox(): AxisAlignedBox {\n        return this.bb;\n    }\n\n    draw(gl: WebGL2RenderingContext, renderMode?: number) {\n        gl.bindVertexArray(this.vao);\n        gl.drawArrays(renderMode || ArrayBufferDataTypeToGL(this.params.dataType), 0, this.params.vertexCount)\n    }\n\n    delete(gl: WebGL2RenderingContext) {\n        gl.deleteVertexArray(this.vao);\n        gl.deleteBuffer(this.buffer);\n    }\n\n    hasNormals(): boolean {\n        return this.params.hasNormals;\n    }\n\n    hasTangent(): boolean {\n        return false;\n    }\n\n    hasUV(): boolean {\n        return this.params.hasUVs;\n    }\n\n    private setupVertexPositionsPointer(gl, attribLocation) {\n        gl.enableVertexAttribArray(attribLocation);\n        gl.vertexAttribPointer(attribLocation, this.params.elementSize, gl.FLOAT, false, this.params.computeStrideInBytes(), 0);\n    }\n\n    private setupVertexNormalsPointer(gl, attribLocation) {\n        if (!this.params.hasNormals) {\n            throw new Error(\"buf has no normals\");\n        }\n        if (attribLocation == -1) {\n            return;\n        }\n        gl.enableVertexAttribArray(attribLocation);\n        gl.vertexAttribPointer(attribLocation, this.params.normalsSize, gl.FLOAT, false, this.params.computeStrideInBytes(), this.params.computeNormalOffset());\n    }\n\n    private setupVertexUVPointer(gl, attribLocation) {\n        if (!this.params.hasUVs) {\n            throw new Error(\"buf has no UVs\");\n        }\n        if (attribLocation == -1) {\n            return;\n        }\n        gl.enableVertexAttribArray(attribLocation);\n        gl.vertexAttribPointer(attribLocation, this.params.uvSize, gl.FLOAT, false, this.params.computeStrideInBytes(), this.params.computeUVOffset());\n    }\n\n    private parepareVAO(gl: WebGL2RenderingContext): WebGLVertexArrayObject {\n        const arr = gl.createVertexArray();\n        try {\n            gl.bindVertexArray(arr);\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n\n            const normals = this.params.hasNormals;\n            const uv = this.params.hasUVs;\n\n            this.setupVertexPositionsPointer(gl, ATTRIBUTE_POSITION_LOC);\n            if (normals) {\n                this.setupVertexNormalsPointer(gl, ATTRIBUTE_NORMALS_LOC);\n            }\n            if (uv) {\n                this.setupVertexUVPointer(gl, ATTRIBUTE_UV_LOC);\n            }\n        } catch (e) {\n            gl.deleteVertexArray(arr);\n        }\n        return arr;\n    }\n}\n","import {ArrayBufferDataType, GLArrayBufferData, GLArrayBufferDataParams} from \"./glArrayBuffer\";\n\n// Parses one object from an object file only.\n\nexport class ObjParser {\n    private textDecoder = new TextDecoder('utf-8');\n    private lineBuf: string = \"\";\n    private faceCount: number = 0;\n    private vertexBuf: Array<number> = [];\n    private normalBuf: Array<number> = [];\n    private texBuf: Array<number> = [];\n    private hasNormals = false;\n    private hasUVs = false;\n    private finalBuf: Array<number> = [];\n    private addHomogenous: boolean;\n\n    constructor(addHomogenousCoordinate: boolean = false) {\n        this.addHomogenous = addHomogenousCoordinate;\n    }\n\n    getArrayBuffer(): GLArrayBufferData {\n        const params = new GLArrayBufferDataParams(this.hasNormals, this.hasUVs, this.getTriangleCount() * 3, ArrayBufferDataType.TRIANGLES);\n        params.elementSize = 3 + (this.addHomogenous ? 1 : 0);\n        params.normalsSize = 3 + (this.addHomogenous ? 1 : 0);\n        return new GLArrayBufferData(\n            new Float32Array(this.finalBuf),\n            params\n        );\n    }\n\n    getTriangleCount(): number {\n        return this.faceCount;\n    }\n\n    feedLine(line: string) {\n        if (line.startsWith('v ')) {\n            const vertices = line.split(' ');\n            vertices.slice(1).forEach((v: string) => {\n                this.vertexBuf.push(parseFloat(v));\n            })\n        } else if (line.startsWith('vt ')) {\n            const tx = line.split(' ');\n            tx.slice(1).forEach((v: string) => {\n                this.texBuf.push(parseFloat(v));\n            });\n            this.hasUVs = true;\n        } else if (line.startsWith('f ')) {\n            const indexes = line.split(' ');\n            indexes.slice(1).forEach((v: string) => {\n                const values = v.split('/');\n\n                const vidx = (parseInt(values[0]) - 1) * 3;\n                const tidx = (parseInt(values[1]) - 1) * 2;\n                const nidx = (parseInt(values[2]) - 1) * 3;\n\n                if (this.hasNormals && nidx === undefined) {\n                    throw new Error(`incomplete object, has normals, but can't parse normals from line: ${line}`)\n                }\n\n                if (this.hasUVs && tidx === undefined) {\n                    throw new Error(`incomplete object, has normals, but can't parse UVs from line: ${line}`)\n                }\n\n                this.finalBuf.push(this.vertexBuf[vidx]);\n                this.finalBuf.push(this.vertexBuf[vidx + 1]);\n                this.finalBuf.push(this.vertexBuf[vidx + 2]);\n\n                if (this.addHomogenous) {\n                    this.finalBuf.push(1.);\n                }\n\n                // normal\n                if (this.hasNormals) {\n                    this.finalBuf.push(this.normalBuf[nidx]);\n                    this.finalBuf.push(this.normalBuf[nidx + 1]);\n                    this.finalBuf.push(this.normalBuf[nidx + 2]);\n                    if (this.addHomogenous) {\n                        this.finalBuf.push(0.);\n                    }\n                }\n                // UV\n                if (this.hasUVs) {\n                    this.finalBuf.push(this.texBuf[tidx] || 0.);\n                    this.finalBuf.push(1. - this.texBuf[tidx + 1] || 0.);\n                }\n            });\n            this.faceCount += 1;\n        } else if (line.startsWith('vn ')) {\n            const normals = line.split(' ');\n            normals.slice(1).forEach((v: string) => {\n                this.normalBuf.push(parseFloat(v));\n            });\n            this.hasNormals = true;\n        }\n    }\n\n    feedByteChunk(data: BufferSource) {\n        const text = this.textDecoder.decode(data, {stream: true});\n        const lines = text.split('\\n');\n        lines[0] = this.lineBuf + lines[0];\n        this.lineBuf = lines.pop();\n\n        // debugger;\n        lines.forEach(line => this.feedLine(line));\n    }\n\n    endParsing() {\n        if (this.lineBuf != \"\") {\n            this.feedLine(this.lineBuf);\n            this.lineBuf = \"\";\n        }\n    }\n\n    clear() {\n        this.lineBuf = \"\";\n        this.vertexBuf = [];\n        this.normalBuf = [];\n        this.finalBuf = [];\n        this.faceCount = 0;\n        this.hasNormals = false;\n        this.hasUVs = false;\n    }\n}\n\nexport async function fetchObject(url: string, progressCallback?: Function, parser?: ObjParser): Promise<ObjParser> {\n    const response = await fetch(url);\n    if (progressCallback) {\n        progressCallback({headers: response.headers});\n    }\n    // Chrome supports incremental fetching, this is more efficient.\n    if (response.body) {\n        const reader = response.body.getReader();\n        const objParser = parser || new ObjParser();\n        while (true) {\n            const {done, value} = await reader.read();\n            if (done) {\n                break;\n            }\n            objParser.feedByteChunk(value);\n            if (progressCallback) {\n                progressCallback({length: value.length});\n            }\n        }\n        objParser.endParsing();\n        console.log(`fetched object from ${url}`);\n        return objParser;\n    } else {\n        const objParser = parser || new ObjParser();\n        const data = await response.arrayBuffer();\n        objParser.feedByteChunk(data);\n        objParser.endParsing();\n        return objParser;\n    }\n}\n","export class GLError extends Error {\n}\n\nexport class LinkError extends GLError {\n}\n\nexport class ShaderLoadError extends GLError {\n}\n","import {LinkError, ShaderLoadError} from \"./errors\";\n\nexport function redefine(shaderSource: string, defineName: string, value: string) {\n    return shaderSource.replace(new RegExp(`#define ${defineName} .*`), `#define ${defineName} ${value}`);\n}\n\nexport function addLineNumbers(source: string) {\n    let line = 1;\n    let result = [];\n    source.split('\\n').forEach(l => {\n        result.push(`${line} ${l}`);\n        line += 1;\n    });\n    return result.join('\\n');\n}\n\nclass RawShader {\n    private shader: WebGLShader;\n    private autodelete = false;\n\n    constructor(gl: WebGL2RenderingContext, type: number, source: string) {\n        source = '#version 300 es\\n' + source;\n        let shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n\n        gl.compileShader(shader);\n\n        let compiled = <Boolean>gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n        if (!compiled) {\n            let error = gl.getShaderInfoLog(shader);\n            gl.deleteShader(shader);\n            throw new ShaderLoadError(error + \"\\n\\n\\n\" + addLineNumbers(source));\n        }\n\n        this.shader = shader;\n    }\n\n    setAutodelete(v: boolean) {\n        this.autodelete = v;\n    }\n\n    shouldAutodelete(): boolean {\n        return this.autodelete;\n    }\n\n    getShader(): WebGLShader {\n        return this.shader;\n    }\n\n    delete(gl: WebGL2RenderingContext) {\n        gl.deleteShader(this.shader);\n        this.shader = null;\n    }\n}\n\nexport class ShaderProgram {\n    private program: WebGLProgram;\n    private _attribs = new Map<String, number>();\n    private _uniforms = new Map<String, WebGLUniformLocation>();\n    private vs: VertexShader;\n    private fs: FragmentShader;\n\n    constructor(gl: WebGL2RenderingContext, vs: VertexShader, fs: FragmentShader) {\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, vs.getShader());\n        gl.attachShader(this.program, fs.getShader());\n        gl.linkProgram(this.program);\n\n        this.vs = vs;\n        this.fs = fs;\n\n        if (!<Boolean>gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            let error = gl.getProgramInfoLog(this.program);\n            gl.deleteProgram(this.program);\n            throw new LinkError(error);\n        }\n    }\n\n    use(gl: WebGL2RenderingContext): ShaderProgram {\n        gl.useProgram(this.getProgram());\n        return this;\n    }\n\n    getProgram(): WebGLProgram {\n        return this.program;\n    }\n\n    deleteAll(gl: WebGL2RenderingContext) {\n        this.delete(gl);\n        if (this.fs.shouldAutodelete()) {\n            this.fs.delete(gl);\n        }\n        if (this.vs.shouldAutodelete()) {\n            this.vs.delete(gl);\n        }\n    }\n\n    delete(gl: WebGL2RenderingContext) {\n        gl.deleteProgram(this.program);\n    }\n\n    getAttribLocation(gl: WebGL2RenderingContext, name: string): number {\n        const existing = this._attribs.get(name);\n        if (existing !== undefined) {\n            return existing;\n        }\n        const loc = gl.getAttribLocation(this.program, name);\n        this._attribs.set(name, loc);\n        return loc;\n    }\n\n    getUniformLocation(gl: WebGL2RenderingContext, name: string): WebGLUniformLocation {\n        const existing = this._uniforms.get(name);\n        if (existing !== undefined) {\n            return existing;\n        }\n        const u = gl.getUniformLocation(this.program, name);\n        this._uniforms.set(name, u);\n        return u;\n    }\n}\n\nexport class FragmentShader extends RawShader {\n    constructor(gl: WebGL2RenderingContext, source: string) {\n        super(gl, gl.FRAGMENT_SHADER, source);\n    }\n}\n\nexport class VertexShader extends RawShader {\n    constructor(gl: WebGL2RenderingContext, source: string) {\n        super(gl, gl.VERTEX_SHADER, source);\n    }\n}\n\nexport class ShaderSourceBuilder {\n    private topChunks: string[] = [];\n    private chunks: string[] = [];\n    private defines: Map<string, string> = new Map();\n    private redefines: Map<string, string> = new Map();\n    private precision = 'highp';\n\n    clone(): ShaderSourceBuilder {\n        const b = new ShaderSourceBuilder();\n        b.topChunks = this.topChunks.slice();\n        b.chunks = this.chunks.slice();\n        this.defines.forEach((v, k) => {\n            b.defines.set(k, v);\n        });\n        this.redefines.forEach((v, k) => {\n            b.redefines.set(k, v);\n        });\n        b.precision = this.precision;\n        return b;\n    }\n\n    setPrecision(p: string): ShaderSourceBuilder {\n        this.precision = p;\n        return this;\n    }\n\n    defineIfTrue(name: string, value: boolean): ShaderSourceBuilder {\n        if (value) {\n            this.defines.set(name, '1');\n        }\n        return this;\n    }\n\n    define(name: string, value: string): ShaderSourceBuilder {\n        this.defines.set(name, value);\n        return this;\n    }\n\n    redefine(name: string, value: string): ShaderSourceBuilder {\n        this.redefines.set(name, value);\n        return this;\n    }\n\n    addChunk(chunk: string): ShaderSourceBuilder {\n        this.chunks.push(chunk);\n        return this;\n    }\n\n    addTopChunk(chunk: string): ShaderSourceBuilder {\n        this.topChunks.push(chunk);\n        return this;\n    }\n\n    include(other: ShaderSourceBuilder): ShaderSourceBuilder {\n        other.topChunks.forEach(tc => {\n            this.topChunks.push(tc);\n        });\n        other.chunks.forEach(c => {\n            this.chunks.push(c);\n        });\n        other.defines.forEach((v, k) => {\n            this.defines.set(k, v);\n        });\n        other.redefines.forEach((v, k) => {\n            this.redefines.set(k, v);\n        });\n        return this;\n    }\n\n    build(): string {\n        const result: string[] = [];\n        result.push(`precision ${this.precision} float;`);\n\n        this.defines.forEach((v, k) => {\n            result.push(`#define ${k} ${v}`)\n        });\n        this.topChunks.forEach(c => {\n            this.redefines.forEach((v, k) => {\n                c = redefine(c, k, v);\n            });\n            result.push(c);\n        });\n        this.chunks.forEach(c => {\n            this.redefines.forEach((v, k) => {\n                c = redefine(c, k, v);\n            });\n            result.push(c);\n        });\n        return result.join('\\n');\n    }\n}\n","import {FragmentShader, ShaderProgram, VertexShader} from \"./shaders\";\nimport {FullScreenQuad} from \"./quad\";\n\nexport class ProgressBarCommon {\n    fs: FragmentShader;\n    vs: VertexShader;\n    shader: ShaderProgram;\n    fullScreenBuffer: FullScreenQuad;\n    posLoc: number;\n    percentLoc: WebGLUniformLocation;\n\n    constructor(gl: WebGL2RenderingContext, fullScreenBuffer: FullScreenQuad) {\n        this.fullScreenBuffer = fullScreenBuffer;\n        this.vs = new VertexShader(gl, `\n        layout(location = 0) in vec2 a_pos;\n        \n        uniform float percent;\n        out vec2 v_pos;\n\n        void main() {\n            gl_Position = vec4((a_pos.x + 1.) * percent - 1., a_pos.y * 0.05, 0., 1.);\n            v_pos = a_pos;\n        }\n        `);\n        this.fs = new FragmentShader(gl, `\n        precision highp float;\n        in vec2 v_pos;\n        out vec4 color;\n        uniform float percent;\n        \n        void main() {\n            // color = vec4(0.5, 1., 1., 1.);\n\n            // just some random crap to test that variables work.\n            // looks OK in the end, so left it.\n            color = vec4(v_pos / 2. + 0.5, percent, 1.);\n        }\n        `);\n        this.shader = new ShaderProgram(gl, this.vs, this.fs);\n        this.percentLoc = this.shader.getUniformLocation(gl, \"percent\")\n    }\n\n    delete(gl: WebGL2RenderingContext) {\n        this.fs.delete(gl);\n    }\n}\n\nexport class ProgressBar {\n    common: ProgressBarCommon;\n\n    constructor(gl: WebGL2RenderingContext, common: ProgressBarCommon) {\n        this.common = common;\n    }\n\n    prepare(gl: WebGL2RenderingContext) {\n        this.common.shader.use(gl);\n    }\n\n    render(gl: WebGL2RenderingContext, percent: number) {\n        gl.uniform1f(this.common.percentLoc, percent);\n        this.common.fullScreenBuffer.draw(gl);\n    }\n\n    delete() {\n\n    }\n}\n","import * as mat4 from \"gl-matrix/src/gl-matrix/mat4\";\nimport * as vec3 from \"gl-matrix/src/gl-matrix/vec3\";\nimport {AxisAlignedBox} from \"./axisAlignedBox\";\nimport {GLArrayBufferI, GLArrayBufferV1} from \"./glArrayBuffer\";\nimport {Material} from \"./material\";\n\nexport abstract class Component {\n    object: GameObject = null;\n\n    setObject(o: GameObject) {\n        this.object = o;\n        return this;\n    }\n}\n\nexport class MeshComponent extends Component {\n    primitives: GLArrayBufferI[];\n    shadowCaster: boolean = true;\n    shadowReceiver: boolean = true;\n    private forceRenderMode: GLenum = undefined;\n\n    constructor(primitives: GLArrayBufferI | GLArrayBufferI[]) {\n        super();\n        if (Array.isArray(primitives)) {\n            this.primitives = primitives;\n        } else {\n            this.primitives = [primitives];\n        }\n    }\n\n    setRenderMode(m: GLenum): MeshComponent {\n        this.forceRenderMode = m;\n        return this;\n    }\n\n    setShadowCaster(v: boolean): MeshComponent {\n        this.shadowCaster = v;\n        return this;\n    }\n\n    setShadowReceiver(v: boolean): MeshComponent {\n        this.shadowReceiver = v;\n        return this;\n    }\n\n    draw(gl: WebGL2RenderingContext) {\n        for (let i = 0; i < this.primitives.length; i++) {\n            const p = this.primitives[i];\n            p.draw(gl, this.forceRenderMode);\n        }\n    }\n}\n\nexport class BoundingBoxComponent extends Component {\n    box: AxisAlignedBox;\n    visible: boolean = false;\n    computedFromChildren: boolean = false;\n\n    private glArrayBuffer: GLArrayBufferI;\n\n    constructor(box: AxisAlignedBox) {\n        super();\n        this.box = box;\n    }\n\n    setComputedFromChildren(v: boolean): this {\n        this.computedFromChildren = v;\n        return this;\n    }\n\n    asArrayBuffer(gl: WebGL2RenderingContext): GLArrayBufferI {\n        if (!this.glArrayBuffer) {\n            this.glArrayBuffer = new GLArrayBufferV1(gl, this.box.asWireFrameBuffer());\n        }\n        return this.glArrayBuffer;\n    }\n}\n\nexport class BaseLightComponent extends Component {\n    color: vec3 = vec3.fromValues(1., 1., 1.);\n    intensity: number = 1.;\n}\n\nexport class DirectionalLight extends BaseLightComponent {\n    direction: vec3 = vec3.fromValues(0, -1, 0);\n    castsShadows: boolean;\n}\n\nexport class PointLightComponent extends BaseLightComponent {\n    radius: number = 1.;\n}\n\nexport class TransformComponent extends Component {\n    position: vec3;\n    rotation: vec3;\n    scale: vec3;\n    object: GameObject;\n\n    private modelToWorld = mat4.create();\n    private modelToParent = mat4.create();\n\n    constructor(object: GameObject) {\n        super();\n        this.object = object;\n        this.position = vec3.fromValues(0, 0, 0);\n        this.rotation = vec3.fromValues(0, 0, 0);\n        this.scale = vec3.fromValues(1, 1, 1);\n        this.computeModelToParent();\n        this.computeModelToWorld();\n    }\n\n    getModelToWorld() {\n        return this.modelToWorld;\n    }\n\n    getModelToParent() {\n        return this.modelToParent;\n    }\n\n    computeModelToWorld() {\n        mat4.copy(this.modelToWorld, this.getModelToParent());\n        const mw = this.modelToWorld;\n        let parent = this.object.parent;\n        while (parent) {\n            mat4.multiply(mw, parent.transform.getModelToParent(), mw);\n            parent = parent.parent;\n        }\n        return mw;\n    }\n\n    computeModelToParent(): any {\n        mat4.identity(this.modelToParent);\n        const modelToParent = this.modelToParent;\n\n        mat4.translate(modelToParent, modelToParent, this.position);\n        mat4.scale(modelToParent, modelToParent, this.scale);\n        mat4.rotateX(modelToParent, modelToParent, this.rotation[0]);\n        mat4.rotateY(modelToParent, modelToParent, this.rotation[1]);\n        mat4.rotateZ(modelToParent, modelToParent, this.rotation[2]);\n        return modelToParent;\n    }\n\n    update() {\n        this.computeModelToParent();\n        this.computeModelToWorld();\n        this.object.children.forEach(c => c.transform.update());\n    }\n\n}\n\nexport class MaterialComponent extends Component {\n    material: Material;\n\n    constructor(m: Material) {\n        super();\n        this.material = m;\n    }\n}\n\nexport class GameObject {\n    children: GameObject[] = [];\n    parent: GameObject;\n    name: string;\n    material: MaterialComponent;\n\n    constructor(name: string) {\n        this._transform = new TransformComponent(this);\n        this.name = name;\n    }\n\n    private _transform: TransformComponent;\n\n    get transform(): TransformComponent {\n        return this._transform;\n    }\n\n    set transform(value: TransformComponent) {\n        this._transform = value;\n        value.object = this;\n    }\n\n    private _mesh: MeshComponent = null;\n\n    get mesh(): MeshComponent {\n        return this._mesh;\n    }\n\n    set mesh(value: MeshComponent) {\n        this._mesh = value;\n        value.object = this;\n    }\n\n    private _pointLight: PointLightComponent = null;\n\n    get pointLight(): PointLightComponent {\n        return this._pointLight;\n    }\n\n    set pointLight(value: PointLightComponent) {\n        this._pointLight = value;\n        value.object = this;\n    }\n\n    private _directionalLight: DirectionalLight = null;\n\n    get directionalLight(): DirectionalLight {\n        return this._directionalLight;\n    }\n\n    set directionalLight(value: DirectionalLight) {\n        this._directionalLight = value;\n        value.object = this;\n    }\n\n    private _boundingBoxComponent: BoundingBoxComponent = null;\n\n    get boundingBoxComponent(): BoundingBoxComponent {\n        return this._boundingBoxComponent;\n    }\n\n    set boundingBoxComponent(value: BoundingBoxComponent) {\n        this._boundingBoxComponent = value;\n        value.object = this;\n    }\n\n    addChild(o: GameObject) {\n        this.children.push(o);\n        o.parent = this;\n        o._transform.update();\n        // console.log(`added ${o.name} as child of ${this.fqdn()}`);\n    }\n\n    fqdn() {\n        const name = [];\n        let o: GameObject = this;\n\n        while (o) {\n            name.push(o.name);\n            o = o.parent;\n        }\n        name.reverse();\n        return name.join(' / ')\n    }\n}\n\nexport class GameObjectBuilder {\n    o: GameObject;\n\n    constructor(name: string) {\n        this.o = new GameObject(name);\n    }\n\n    setMeshFromBuffer(mesh: GLArrayBufferI): this {\n        this.o.mesh = new MeshComponent(mesh);\n        this.o.boundingBoxComponent = new BoundingBoxComponent(mesh.getBoundingBox());\n        return this;\n    }\n\n    setMeshComponent(meshComponent: MeshComponent): this {\n        this.o.mesh = meshComponent;\n        meshComponent.setObject(this.o);\n        return this;\n    }\n\n    setDirectionalLightComponent(light: DirectionalLight): this {\n        this.o.directionalLight = light;\n        light.object = this.o;\n        return this;\n    }\n\n    setPointLightComponent(light: PointLightComponent): this {\n        this.o.pointLight = light;\n        light.object = this.o;\n        return this;\n    }\n\n    setBoundingBoxComponent(bbox: BoundingBoxComponent): this {\n        this.o.boundingBoxComponent = bbox;\n        bbox.object = this.o;\n        return this;\n    }\n\n    setMaterialComponent(c: MaterialComponent): this {\n        this.o.material = c;\n        c.object = this.o;\n        return this;\n    }\n\n    build(): GameObject {\n        return this.o;\n    }\n}\n","import {DirectionalLight, GameObject, GameObjectBuilder, PointLightComponent} from \"./object\";\nimport * as vec3 from \"gl-matrix/src/gl-matrix/vec3\";\nimport {randVec3} from \"./utils\";\n\nexport function randomPointLight(posScale: number, intensity?: number) {\n    intensity = intensity || 1.;\n    const l = new GameObjectBuilder(\"a light\").setPointLightComponent(new PointLightComponent()).build();\n    l.transform.position = randVec3(-posScale, posScale);\n    l.transform.scale = vec3.fromValues(0.1, 0.1, 0.1);\n    l.transform.update();\n\n    l.pointLight.color = vec3.normalize(l.pointLight.color, randVec3(0., 1.));\n    l.pointLight.intensity = intensity;\n    return l.pointLight;\n}\n\nexport function randomPointLights(count: number, posScale: number, totalIntensity?: number): PointLightComponent[] {\n    if (totalIntensity === undefined) {\n        totalIntensity = 1.0;\n    }\n    const result: PointLightComponent[] = [];\n    for (let index = 0; index < count; index++) {\n        const l = randomPointLight(posScale, totalIntensity / count);\n        result.push(l);\n    }\n    return result;\n}\n\nexport class Scene {\n    children: GameObject[] = [];\n    directionalLights: DirectionalLight[] = [];\n    pointLights: PointLightComponent[] = [];\n\n    constructor() {\n    }\n\n    addChild(o: GameObject) {\n        this.children.push(o);\n        o.parent = null;\n        o.transform.update();\n        // console.log(`added ${o.fqdn()} to scene`)\n    }\n}\n","export const GBUF_TEXTURES = `\nuniform sampler2D gbuf_position;\nuniform sampler2D gbuf_normal;\nuniform sampler2D gbuf_colormap;\nuniform sampler2D gbuf_metallic_roughness;\n\nvec4 read_gbuffer_normal(vec2 pos) {\n    vec3 val = texture(gbuf_normal, pos).xyz;\n    bool zIsNegative = false;\n    if (val.x > 1.5) {\n        val.x -= 3.;\n        zIsNegative = true;\n    }\n    // clamp is for float error correction\n    val.z = sqrt(clamp(1. - val.x * val.x - val.y * val.y, 0., 1.));\n    if (zIsNegative) {\n        val.z = -val.z;\n    }\n    val = normalize(val);\n    return vec4(val, 0.);\n}\n\nstruct metallicRoughness {\n    float metallic;\n    float roughness;\n};\n\nvoid gbufferMetallicRoughness(vec2 coord, out float metallic, out float roughness) {\n    vec4 tx = texture(gbuf_metallic_roughness, coord);\n    metallic = tx.r;\n    roughness = tx.g;\n    return;\n}\n\n#define GBUFFER_POSITION(coord) (texture(gbuf_position, coord))\n#define GBUFFER_NORMAL(coord) (read_gbuffer_normal(coord))\n#define GBUFFER_ALBEDO(coord) (texture(gbuf_colormap, coord))\n#define GBUFFER_MR(coord, metallic, roughness)     gbufferMetallicRoughness(coord, metallic, roughness)\n`;\n\nexport const QUAD_FRAGMENT_INPUTS = `\nin vec2 v_pos;\nin vec2 tx_pos;\n`;\n\nexport const WORLD_AND_CAMERA_TRANSFORMS = `\nuniform vec3 u_cameraPos;\nuniform mat4 u_modelViewMatrix;\nuniform mat4 u_modelWorldMatrix;\nuniform mat4 u_worldToCameraMatrix;\nuniform mat4 u_cameraToWorldMatrix;\nuniform mat4 u_perspectiveMatrix;\n`;\n","import {ShaderSourceBuilder} from \"../shaders\";\nimport {GBUF_TEXTURES, QUAD_FRAGMENT_INPUTS, WORLD_AND_CAMERA_TRANSFORMS} from \"./includes/common\";\nimport {PBR_INCLUDE} from \"./includes/pbr\";\n\nconst SHOW_LAYER_FS = new ShaderSourceBuilder()\n    .addTopChunk(QUAD_FRAGMENT_INPUTS)\n    .addTopChunk(GBUF_TEXTURES)\n    .addChunk(`\nlayout(location = 0) out vec4 color;\n\nuniform sampler2D u_ssaoTx;\nuniform sampler2D u_shadowmapTx;\n\nuniform float u_lightNear;\nuniform float u_lightFar;\n\nfloat eye_space_z(float depth, float near, float far) {\n    float eye_z = near * far / ((depth * (far - near)) - far);\n    float val = ( eye_z - (-near) ) / ( -far - (-near) );\n    return val;\n} \n\nvoid main() {\n    #ifdef SHOW_SSAO\n    color = vec4(vec3(texture(u_ssaoTx, tx_pos).r), 1.);\n    return;\n    #endif\n\n    vec4 normal = GBUFFER_NORMAL(tx_pos);\n    vec4 pos = GBUFFER_POSITION(tx_pos);\n    vec4 albedo = GBUFFER_ALBEDO(tx_pos);\n    \n    float metallic;\n    float roughness;\n    GBUFFER_MR(tx_pos, metallic, roughness);\n\n    #ifdef SHOW_NORMALS\n    color = vec4(normal.xyz * .5 + .5, pos.a);\n    // color = normal;\n    return;\n    #endif\n\n    #ifdef SHOW_POSITIONS\n    color = pos;\n    return;\n    #endif\n\n    #ifdef SHOW_COLORS\n    color = albedo;\n    return;\n    #endif\n    \n    #ifdef SHOW_METALLIC\n    color = vec4(vec3(metallic), pos.a);\n    return;\n    #endif\n    \n    #ifdef SHOW_ROUGHNESS\n    color = vec4(vec3(roughness), pos.a);\n    return;\n    #endif\n\n    #ifdef SHADOWMAP_ENABLED\n    #ifdef SHOW_SHADOWMAP\n    // color = vec4(vec3(eye_space_z(texture(u_shadowmapTx, tx_pos).r, u_lightNear, u_lightFar)), 1.);\n    color = vec4(vec3(texture(u_shadowmapTx, tx_pos).r), 1.);\n    return;\n    #endif\n    #endif\n\n    color = vec4(.5, .0, .0, 1.);\n    return;\n}\n`);\n\nconst LIGHTING_FS = new ShaderSourceBuilder()\n    .addTopChunk(QUAD_FRAGMENT_INPUTS)\n    .addTopChunk(WORLD_AND_CAMERA_TRANSFORMS)\n    .addTopChunk(GBUF_TEXTURES)\n    .addTopChunk(`\nlayout(location = 0) out vec4 color;\n\n#define SHADOW_MAP_ERROR 0.99\n\nuniform sampler2D u_ssaoTx;\nuniform sampler2D u_shadowmapTx;\n\nuniform mat4 u_cameraViewSpaceToLightCamera;\n\nuniform float u_shadowMapFixedBias;\nuniform float u_shadowMapNormalBias;\nuniform float u_lightNear;\nuniform float u_lightFar;\n\nstruct light {\n    #ifdef DIRECTIONAL_LIGHT\n    vec3 direction;\n    #endif\n    \n    #ifdef POINT_LIGHT\n    float radius;\n    float attenuation;\n    vec3 position;\n    #endif\n    \n    vec3 color;\n    float intensity;\n};\n\nuniform vec3[3] u_lightData;\n\nlight makeLight() {\n    light l;\n    \n    #ifdef DIRECTIONAL_LIGHT\n    l.direction = (u_worldToCameraMatrix * vec4(u_lightData[0], 0.)).xyz;\n    #endif\n    \n    #ifdef POINT_LIGHT\n    l.position = (u_worldToCameraMatrix * vec4(u_lightData[0], 1.)).xyz;\n    l.radius = u_lightData[2].y;\n    l.attenuation = u_lightData[2].z;\n    #endif\n    \n    l.color = u_lightData[1];\n    l.intensity = u_lightData[2].x;\n    \n    return l;\n}\n`)\n    .addTopChunk(PBR_INCLUDE)\n    .addChunk(`\nvoid main() {\n    vec4 normal = GBUFFER_NORMAL(tx_pos);\n    vec4 pos = GBUFFER_POSITION(tx_pos);\n    vec4 albedo = GBUFFER_ALBEDO(tx_pos);\n\n    float metallic;\n    float roughness;\n    GBUFFER_MR(tx_pos, metallic, roughness);\n\n    // final color.\n    vec3 c = vec3(0.);\n\n    light l = makeLight();\n    \n    #ifdef POINT_LIGHT\n    vec3 lightDir = normalize(pos.xyz - l.position);\n    float distanceForAttenuation = length(l.position - pos.xyz);\n    float attenuation = UE4Falloff(distanceForAttenuation, l.radius);\n    \n    // color = vec4(1.);\n    // return;\n    #endif\n    \n    #ifdef DIRECTIONAL_LIGHT\n    vec3 lightDir = l.direction;\n    float attenuation = 1.;\n    #endif\n    \n    #ifdef SSAO_ENABLED\n    float ssao = texture(u_ssaoTx, tx_pos).r;\n    #else\n    float ssao = 1.0;\n    #endif\n    \n    //ambient\n    vec3 ambient = vec3(AMBIENT_CONSTANT_HACK) * albedo.rgb * l.color * ssao * attenuation * l.intensity;\n    c += ambient;\n\n    #ifdef SHADOWMAP_ENABLED\n    float bias = u_shadowMapFixedBias + u_shadowMapNormalBias * (1.0 - abs(dot(normal.xyz, -lightDir)));\n\n    vec4 posLSS = u_cameraViewSpaceToLightCamera * pos;\n    posLSS.xyz /= posLSS.w;\n    \n    // color = posLSS;\n    // return;\n\n    vec2 texmapscale = vec2(1. / SHADOW_MAP_WIDTH, 1. / SHADOW_MAP_HEIGHT);\n\n    int notInShadowSamples = 0;\n    float x, y;\n    float shadowMapDepth;\n    vec2 base = posLSS.xy * 0.5 + 0.5;\n\n    for (y = -1.5; y <= 1.5; y += 1.0) {\n        for (x = -1.5; x <= 1.5; x += 1.0) {\n            vec2 offset = base + vec2(x, y) * texmapscale;\n            \n            // the depth buffer texture is clamped to 0, 1, so unclamp.\n            shadowMapDepth = texture(u_shadowmapTx, offset).r * 2. - 1.;\n            \n            // out of bounds by X or Y\n            if (offset.x < 0. || offset.y < 0. || offset.x > 1. || offset.y > 1.) {\n                notInShadowSamples++;\n                continue;\n            }\n            \n            // out of bounds by Z case\n            if (abs(posLSS.z) > 1.) {\n                // if out of bounds by Z, then it's in shadow if there's anything else in view (i.e. there's depth)\n                if (abs(shadowMapDepth) < SHADOW_MAP_ERROR) {\n                    continue;\n                }\n                notInShadowSamples++;\n                continue;\n            } else if (shadowMapDepth > posLSS.z - bias) {\n                notInShadowSamples++;\n            }\n        }\n    }\n    l.intensity *= float(notInShadowSamples) / 16.0;\n    #endif\n    \n    // calculate per-light radiance\n    vec3 radiance = l.color * attenuation * l.intensity;\n    \n    c += CookTorranceBRDF(\n        albedo.xyz, roughness, metallic, \n        -normalize(pos.xyz), normal.xyz, -lightDir, radiance\n    );\n\n    c = toneMap(c);\n\n    color = vec4(c.xyz, 1.);\n}\n`);\n\n\nconst POINT_LIGHT_RADIUS_VS = new ShaderSourceBuilder()\n    .addTopChunk(WORLD_AND_CAMERA_TRANSFORMS)\n    .addChunk(`\nlayout(location = 0) in vec4 a_pos;\nout vec2 tx_pos;\n\nvoid main() {\n    gl_Position = u_perspectiveMatrix * u_modelViewMatrix * a_pos;\n    gl_Position /= gl_Position.w;\n    tx_pos = (gl_Position.xy / gl_Position.w) / 2. + 0.5;\n}\n`);\n\nexport const FINAL_SHADER_SOURCE = {\n    fs: LIGHTING_FS,\n    showLayerFS: SHOW_LAYER_FS,\n    pointLightSphere: POINT_LIGHT_RADIUS_VS,\n};\n","export const PBR_INCLUDE = `\nconst float PI = 3.14159265359;\n\n// https://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\n\nfloat UE4Falloff(float distance, float lightRadius) {\n    float nominator = clamp(1. - pow(distance / lightRadius, 4.), 0., 1.); \n    return nominator * nominator / (distance * distance + 1.);\n}\n\nfloat UE4NDF(float NdotH, float roughness)\n{\n    float a      = roughness*roughness;\n    float a2     = a*a;\n    float NdotH2 = NdotH*NdotH;\n\t\n    float num   = a2;\n    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n    denom = PI * denom * denom;\n\t\n    return num / denom;\n}\n\nfloat GeometrySchlickGGX(float NdotV, float roughness) {\n    float r = (roughness + 1.0);\n    float k = (r*r) / 8.0;\n\n    float num   = NdotV;\n    float denom = NdotV * (1.0 - k) + k;\n\t\n    return num / denom;\n}\n\nfloat GeometrySmith(float NdotV, float NdotL, float roughness) {\n    float ggx2  = GeometrySchlickGGX(NdotV, roughness);\n    float ggx1  = GeometrySchlickGGX(NdotL, roughness);\n    return ggx1 * ggx2;\n}\n\nvec3 fresnelSchlick(float HdotV, vec3 F0) {\n    return F0 + (1.0 - F0) * pow(1.0 - HdotV, 5.0);\n}  \n\nvec3 fresnelSchlick(vec3 albedo, float metallic, float HdotV) {\n    vec3 F0 = vec3(0.04); \n    F0 = mix(F0, albedo, metallic);\n\n    return fresnelSchlick(HdotV, F0);\n}\n\nvec3 CookTorranceBRDF(\n    vec3 albedo, float roughness, float metallic, \n    vec3 V, vec3 normal, vec3 L, vec3 radiance\n) {\n    vec3 H = normalize(V + L);\n    vec3 N = normal;\n    \n    float NdotL = max(dot(N, L), 0.);\n    float NdotH = max(dot(N, H), 0.);\n    float NdotV = max(dot(N, V), 0.);\n    float HdotV = max(dot(H, V), 0.);\n\n    float NDF = UE4NDF(NdotH, roughness);\n    // return NDF * radiance * NdotL;\n    \n    float G = GeometrySmith(NdotV, NdotL, roughness);      \n    vec3 F = fresnelSchlick(albedo, metallic, HdotV);       \n    \n    vec3 kD = vec3(1.0) - F;\n    kD *= 1.0 - metallic;\t  \n    \n    vec3 numerator    = NDF * G * F;\n    float denominator = 4.0 * NdotV * NdotL;\n    vec3 specular     = numerator / max(denominator, 0.001);\n        \n    // add to outgoing radiance Lo\n    return (kD * albedo.xyz / PI + specular) * radiance * NdotL; \n}\n\nvec3 toneMap(vec3 color) {\n    color = color / (color + vec3(1.0));\n    color = pow(color, vec3(1.0/2.2));\n    return color; \n}\n\n`;\n","const VS = `\nprecision highp float;\n\nlayout(location = 0) in vec4 a_pos;\nlayout(location = 1) in vec3 a_norm;\nlayout(location = 2) in vec2 a_uv;\nlayout(location = 3) in vec4 a_tangent;\n\nuniform mat4 u_modelViewMatrix;\nuniform mat4 u_modelWorldMatrix;\nuniform mat4 u_worldToCameraMatrix;\nuniform mat4 u_perspectiveMatrix;\n\nout vec4 v_pos;\nout vec4 v_norm;\nout vec2 v_uv;\nout vec4 v_tangent;\n\nvoid main() {\n    v_pos = u_modelViewMatrix * a_pos;\n    gl_Position = u_perspectiveMatrix * u_modelViewMatrix * a_pos;\n\n    v_norm = normalize(u_modelViewMatrix * vec4(a_norm, 0.));\n    v_uv = a_uv;\n    v_tangent = a_tangent;\n    gl_PointSize = 2.;    \n}\n`;\n\nconst FS = `\nprecision highp float;\n\nin vec4 v_pos;\nin vec4 v_norm;\nin vec4 v_tangent;\nin vec2 v_uv;\n\nuniform mat4 u_modelViewMatrix;\nuniform vec4 u_albedo;\nuniform vec4 u_albedoFactor;\nuniform bool u_albedoHasFactor;\nuniform bool u_albedoHasTexture;\nuniform sampler2D u_albedoTexture;\n\nuniform float u_metallic;\nuniform bool u_metallicHasTexture;\nuniform sampler2D u_metallicTexture;\n\nuniform float u_roughness;\nuniform bool u_roughnessHasTexture;\nuniform sampler2D u_roughnessTexture;\n\nuniform bool u_normalMapHasTexture;\nuniform bool u_hasTangent;\nuniform sampler2D u_normalMapTx;\n\nlayout(location = 0) out vec4 gbuf_position;\nlayout(location = 1) out vec3 gbuf_normal;\nlayout(location = 2) out vec4 gbuf_albedo;\nlayout(location = 3) out vec4 gbuf_metallic_roughness;\n\nvec4 srgb(vec4 color) {\n    return vec4(pow(color.rgb, vec3(2.2)), color.a);\n}\n\nvoid main() {\n    gbuf_position = vec4(v_pos.xyz, 1.0);\n    vec3 normal;\n    if (u_normalMapHasTexture && u_hasTangent) {\n        vec3 normalMap = normalize(texture(u_normalMapTx, v_uv).xyz * 2. - 1.);\n        vec3 tangent = normalize(u_modelViewMatrix * vec4(v_tangent.xyz, 0.)).xyz;\n        vec3 bitangent = cross(v_norm.xyz, tangent) * v_tangent.w;\n        mat3 tangentToView = mat3(\n            tangent,\n            bitangent,\n            v_norm.xyz\n        );\n        normal = normalize(tangentToView * normalMap);\n    } else {\n        normal = normalize(v_norm.xyz);\n    }\n    // encode Z normal sign in R. This is pretty stupid encoding but does the job.\n    if (normal.z < 0.) {\n        normal.x += 3.;\n    }\n    gbuf_normal = normal;\n    \n    if (u_albedoHasTexture) {\n        gbuf_albedo = srgb(texture(u_albedoTexture, v_uv));\n        if (u_albedoHasFactor) {\n           gbuf_albedo *= u_albedoFactor;\n        }\n    } else {\n        gbuf_albedo = u_albedo;\n    }\n\n    if (gbuf_albedo.a == 0.) {\n        discard;\n        return;\n    }\n    \n    float metallic;\n    float roughness;\n    \n    if (u_metallicHasTexture) {\n        metallic = texture(u_metallicTexture, v_uv).b;\n    } else {\n        metallic = u_metallic;\n    }\n    \n    if (u_roughnessHasTexture) {\n        roughness = texture(u_roughnessTexture, v_uv).g;\n    } else {\n        roughness = u_roughness;\n    }\n    \n    gbuf_metallic_roughness = vec4(metallic, roughness, 1., 1.);\n}\n`;\n\nexport const GBUFFER_SHADER_SOURCE = {\n    vs: VS,\n    fs: FS,\n};\n","import {ShaderSourceBuilder} from \"../shaders\";\nimport {GBUF_TEXTURES, QUAD_FRAGMENT_INPUTS, WORLD_AND_CAMERA_TRANSFORMS} from \"./includes/common\";\n\nconst SSAO_FIRST_PASS_FS = new ShaderSourceBuilder()\n    .setPrecision('lowp')\n    .addTopChunk(GBUF_TEXTURES)\n    .addTopChunk(WORLD_AND_CAMERA_TRANSFORMS)\n    .addTopChunk(QUAD_FRAGMENT_INPUTS)\n    .addChunk(`\nlayout(location = 0) out vec4 color;\n\nuniform float u_ssaoRadius;\nuniform float u_ssaoBias;\nuniform sampler2D u_ssaoNoise;\nuniform vec2 u_ssaoNoiseScale;\nuniform vec3[SSAO_SAMPLES] u_ssaoSamples;\n\nfloat ssao(vec3 normalVS, vec4 posVS, vec2 tx_pos) {\n    vec3 random = normalize(texture(u_ssaoNoise, tx_pos * u_ssaoNoiseScale).xyz);\n    vec3 tangent = normalize(random - normalVS * dot(normalVS, random));\n    vec3 bitangent = cross(normalVS, tangent);\n    \n    mat3 tangentToViewSpaceMatrix = mat3(tangent, bitangent, normalVS);\n\n    // return vec4(normal, 1.);\n    // return vec4(tangentToViewSpaceMatrix * normalVS, 1.);\n\n    float radius = u_ssaoRadius;\n    float samples = float(SSAO_SAMPLES);\n    float occlusion = 0.;\n    float totalWeight = 0.;\n    float bias = u_ssaoBias;\n\n    for (int i = 0; i < SSAO_SAMPLES; i++) {\n        vec4 randomVectorVS = vec4(tangentToViewSpaceMatrix * u_ssaoSamples[i], 0.);\n        // vec4 randomVectorVS = vec4(tangentToViewSpaceMatrix * vec3(0., 0., 1.), 0.);\n\n        // Sample in view space.\n        vec4 sampleVS = posVS + randomVectorVS * radius;\n\n        vec4 sampleSS = u_perspectiveMatrix * sampleVS;\n        sampleSS /= sampleSS.w;\n        \n        float weight = dot(randomVectorVS.xyz, normalVS.xyz);\n        totalWeight += weight;\n\n        vec2 absSampleSS = abs(sampleSS.xy);\n        if (absSampleSS.x >= 1. || absSampleSS.y >= 1.) {\n            continue;\n        }\n        \n        vec4 storedPosVS = GBUFFER_POSITION(sampleSS.xy * 0.5 + 0.5);\n        float storedDepthVS = storedPosVS.z;\n\n        if (storedDepthVS > sampleVS.z + bias) {\n            float falloff = smoothstep(0.0, 1.0, radius / length(storedPosVS.xyz - posVS.xyz));\n            // float falloff = 1. - smoothstep(0.8, 1.2, length(storedPosVS.xyz - posVS.xyz) / radius);\n            occlusion += falloff * weight;\n        }\n    }\n    occlusion = 1. - (occlusion / totalWeight);\n    return occlusion;\n}\n\nvoid main() {\n    vec3 normal = GBUFFER_NORMAL(tx_pos).xyz;\n    vec4 pos = GBUFFER_POSITION(tx_pos);\n\n    float occlusion = ssao(normal, pos, tx_pos);\n    color = vec4(vec3(occlusion), pos.a);\n}\n`);\n\n\nconst SSAO_BLUR_FS = new ShaderSourceBuilder()\n    .addTopChunk(GBUF_TEXTURES)\n    .addTopChunk(QUAD_FRAGMENT_INPUTS)\n    .addTopChunk(WORLD_AND_CAMERA_TRANSFORMS)\n    .addChunk(`\nlayout(location = 0) out vec4 color;\n\nuniform sampler2D u_ssaoFirstPassTx;\nuniform float u_ssaoStrength;\nuniform float u_ssaoBlurPositionThreshold;\nuniform float u_ssaoBlurNormalThreshold;\n\n// This does position and normal-aware \"smart-blur\".\nfloat getSsaoBlurred(vec4 posVS, vec3 normalVS) {\n    vec2 texelSize = vec2(1. / float(SSAO_TEXEL_SIZE_X), 1. / float(SSAO_TEXEL_SIZE_Y));\n    \n    if (posVS.a == 0.) {\n        return 1.;\n    }\n\n    int samples = 1;\n    float occlusion = texture(u_ssaoFirstPassTx, tx_pos).r;\n    // return occlusion;\n    \n    for (int i = -SSAO_NOISE_SCALE / 2; i < SSAO_NOISE_SCALE / 2; i++) {\n        for (int j = -SSAO_NOISE_SCALE / 2; j < SSAO_NOISE_SCALE / 2; j++) {\n            if (i == 0 && j == 0) {\n                continue;\n            }\n\n            vec2 offset = tx_pos + texelSize * vec2(float(i), float(j));\n            \n            vec4 posVS_offset = GBUFFER_POSITION(offset);\n            if (posVS_offset.a == 0.) {\n                continue;\n            }\n            \n            if (abs(posVS.z - posVS_offset.z) > u_ssaoBlurPositionThreshold) {\n                continue;\n            }\n            \n            vec3 normalVS_offset = GBUFFER_NORMAL(offset).xyz;\n            if (abs(dot(normalVS_offset, normalVS)) < u_ssaoBlurNormalThreshold) {\n                continue;\n            }\n            \n            occlusion += texture(u_ssaoFirstPassTx, offset).r;\n            samples += 1;\n        }\n    }\n\n    occlusion /= float(samples);\n    \n    return pow(occlusion, u_ssaoStrength);\n}\n\nvoid main() {\n    vec3 normalVS = GBUFFER_NORMAL(tx_pos).xyz;\n    vec4 posVS = GBUFFER_POSITION(tx_pos);\n    \n    color = vec4(getSsaoBlurred(posVS, normalVS), 0., 0., 1.);\n    // color = vec4(texture(u_ssaoFirstPassTx, tx_pos).xyz, 1.);\n}\n`);\n\nexport const SSAO_SHADER_SOURCE = {\n    first_pass_fs: SSAO_FIRST_PASS_FS,\n    blur_pass_fs: SSAO_BLUR_FS\n};\n","import {ShaderSourceBuilder} from \"../shaders\";\nimport {WORLD_AND_CAMERA_TRANSFORMS} from \"./includes/common\";\n\nconst VS = new ShaderSourceBuilder()\n    .addTopChunk(WORLD_AND_CAMERA_TRANSFORMS)\n    .addChunk(`\nlayout(location = 0) in vec4 a_pos;\nout vec4 v_pos;\nout vec2 tx_pos;\n\nvoid main() {\n    v_pos = u_modelViewMatrix * a_pos;\n    gl_Position = u_perspectiveMatrix * v_pos;\n    tx_pos = (gl_Position.xy / gl_Position.w) / 2. + 0.5;\n}\n`);\n\nconst FS = new ShaderSourceBuilder()\n    .addTopChunk(WORLD_AND_CAMERA_TRANSFORMS)\n    .addChunk(`\nin vec4 v_pos;\nin vec2 tx_pos;\n\nuniform vec3 u_color;\nuniform float u_intensity;\nuniform sampler2D u_posTexture;\n\nout vec4 color;\n\nvoid main() {\n    float alpha = 1.0;\n    vec4 sceneTexel = texture(u_posTexture, tx_pos);\n    vec4 scenePos = sceneTexel;\n    if (scenePos.z > v_pos.z && sceneTexel.a > 0.) {\n        alpha = 0.;\n    }\n    color = vec4(u_color * u_intensity, alpha);\n}\n`);\n\nexport const VISUALIZE_LIGHTS_SHADERS = {\n    vs: VS,\n    FS: FS,\n};\n","import {lerp, randFloat} from \"./utils\";\n\nexport class SSAOConfig {\n    enabled: boolean = true;\n    sampleCount: number = 32;\n    noiseScale: number = 2;\n    scalePower: number = 2;\n    radius: number = 0.75;\n    bias: number = 0.025;\n    strength: number = 1.0;\n    blurPositionThreshold: number = 0.3;\n    blurNormalThreshold: number = 0.9;\n\n    isEnabled() {\n        return this.enabled && this.strength > 0;\n    }\n\n    copy(): SSAOConfig {\n        return Object.assign(new SSAOConfig(), this);\n    }\n}\n\nexport class SSAOState {\n    usedConfig: SSAOConfig;\n    tangentSpaceSamples: Float32Array;\n    noiseTexture: WebGLTexture;\n\n    constructor(gl: WebGL2RenderingContext, config: SSAOConfig) {\n        // Generate random samples.\n        this.recalculate(gl, config);\n    }\n\n    recalculate(gl: WebGL2RenderingContext, config: SSAOConfig): SSAOState {\n        this.delete(gl);\n        this.usedConfig = config.copy();\n\n        const samples = new Array<number>();\n        for (let index = 0; index < config.sampleCount; index++) {\n            const scale = lerp(Math.pow(index / config.sampleCount, config.scalePower), 0., 1., 0.1, 1.);\n            samples.push(randFloat(-1, 1) * scale);\n            samples.push(randFloat(-1, 1) * scale);\n            samples.push(randFloat(0, 1) * scale);\n        }\n        this.tangentSpaceSamples = new Float32Array(samples);\n\n        const randomRotationVectors = [];\n\n        // screen space random vector that points only in xy direction so that it's\n        // orthogonal to screen-space normal vector.\n        for (let i = 0; i < config.noiseScale * config.noiseScale; i++) {\n            randomRotationVectors.push(randFloat(-1, 1));\n            randomRotationVectors.push(randFloat(-1, 1));\n            randomRotationVectors.push(0)\n        }\n        const randomRotationVectorsView = new Float32Array(randomRotationVectors);\n\n        // Generate random rotations texture;\n        this.noiseTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, this.noiseTexture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB16F, config.noiseScale, config.noiseScale, 0, gl.RGB, gl.FLOAT, randomRotationVectorsView);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        return this;\n    }\n\n    delete(gl: WebGL2RenderingContext) {\n        if (this.noiseTexture) {\n            gl.deleteTexture(this.noiseTexture);\n        }\n    }\n}\n","import {ShaderSourceBuilder} from \"../shaders\";\nimport {WORLD_AND_CAMERA_TRANSFORMS} from \"./includes/common\";\n\nconst VS = new ShaderSourceBuilder()\n    .addTopChunk(WORLD_AND_CAMERA_TRANSFORMS)\n    .addChunk(`\nlayout(location = 0) in vec4 a_pos;\nout vec4 v_pos;\n\nuniform mat4 u_lightCameraWorldToProjectionMatrix;\n\nvoid main() {\n    v_pos = u_lightCameraWorldToProjectionMatrix * u_modelWorldMatrix * a_pos;\n    gl_Position = v_pos;\n}\n`);\n\n\nconst FS = new ShaderSourceBuilder()\n    .addChunk(`\nvoid main() {\n}\n`);\n\nexport const SHADOWMAP_SHADERS = {\n    vs: VS,\n    fs: FS,\n};\n","import * as vec4 from \"gl-matrix/src/gl-matrix/vec4\";\nimport {Texture} from \"./texture\";\n\nexport class TextureOrValue<T> {\n    value: T;\n    texture: Texture = null;\n    factor: T;\n\n    constructor(value: T, texture?: Texture, factor?: T) {\n        this.value = value;\n        this.factor = factor;\n        if (texture) {\n            this.texture = texture;\n        }\n    }\n\n    setValue(value: T): TextureOrValue<T> {\n        this.value = value;\n        return this;\n    }\n\n    setFactor(value: T): TextureOrValue<T> {\n        this.factor = value;\n        return this;\n    }\n\n    hasTexture(): boolean {\n        return !!this.texture;\n    }\n\n    hasFactor(): boolean {\n        return this.factor !== undefined && this.factor !== null;\n    }\n\n    setTexture(texture: Texture): TextureOrValue<T> {\n        this.texture = texture;\n        return this;\n    }\n}\n\nexport class Material {\n    albedo: TextureOrValue<vec4> = new TextureOrValue(vec4.fromValues(1, 1, 1, 1));\n    metallic: TextureOrValue<number> = new TextureOrValue(0);\n    roughness: TextureOrValue<number> = new TextureOrValue(0.5);\n    normalMap: Texture;\n\n    isReflective: boolean = false;\n\n    constructor(albedo?: vec4, metallic?: number, roughness?: number) {\n        if (albedo) {\n            vec4.copy(this.albedo.value, albedo);\n        }\n        if (metallic !== undefined) {\n            this.metallic.value = metallic;\n        }\n        if (roughness !== undefined) {\n            this.roughness.value = roughness;\n        }\n    }\n\n    setAlbedo(r, g, b, a): Material {\n        this.albedo.value[0] = r;\n        this.albedo.value[1] = g;\n        this.albedo.value[2] = b;\n        this.albedo.value[3] = a;\n        return this;\n    }\n\n    setMetallic(v: number): Material {\n        this.metallic.setValue(v);\n        return this;\n    }\n\n    setRoughness(v: number): Material {\n        this.roughness.setValue(v);\n        return this;\n    }\n\n    setReflective(v: boolean): Material {\n        this.isReflective = v;\n        return this;\n    }\n\n    setNormalMap(t: Texture): Material {\n        this.normalMap = t;\n        return this;\n    }\n}\n","import {ShaderSourceBuilder} from \"../shaders\";\nimport {GBUF_TEXTURES, QUAD_FRAGMENT_INPUTS, WORLD_AND_CAMERA_TRANSFORMS} from \"./includes/common\";\n\nconst FS = new ShaderSourceBuilder()\n    .addChunk(QUAD_FRAGMENT_INPUTS)\n    .addChunk(WORLD_AND_CAMERA_TRANSFORMS)\n    .addChunk(GBUF_TEXTURES)\n    .addChunk(`\nout vec4 color;\nuniform sampler2D u_lightedSceneTx;\n\nvoid main() {\n    vec3 eye = vec3(0., 0., 0.);\n    vec4 posVS = GBUFFER_POSITION(tx_pos);\n    vec4 normalVS = GBUFFER_NORMAL(tx_pos);\n    \n    float metallic;\n    float roughness;\n    GBUFFER_MR(tx_pos, metallic, roughness);\n    \n    vec3 reflectRay = reflect(normalize(posVS.xyz - eye), normalVS.xyz);\n\n    // float strength = (1. - roughness) * metallic;\n    float strength = (1. - roughness);\n    // float strength = 1.; // this is good for testing SSR or just displaying it.\n    if (strength < 0.01) {\n        color = vec4(vec3(0.), 0.);\n        return;\n    }\n    \n    vec3 c = vec3(0.);\n    \n    int i = 0;\n\n    bool isFound = false;\n    \n    for (; i < SSR_STEPS; i++) {\n        vec3 sampleVS = posVS.xyz + reflectRay * (SSR_STEP_SIZE * float(i + 1));\n        vec4 sampleSS4 = u_perspectiveMatrix * vec4(sampleVS, 1.);\n        vec3 sampleSS = sampleSS4.xyz / sampleSS4.w;\n        \n        // ignore off-screen samples\n        if (abs(sampleSS.x) > 1. || abs(sampleSS.y) > 1.) {\n            break;\n        } \n        \n        vec4 resultVS = GBUFFER_POSITION(sampleSS.xy * 0.5 + 0.5);\n        \n        // The ray intersected smth, do binary search\n        float distance = resultVS.z - sampleVS.z;\n        float minDistance = abs(distance);\n        vec3 minPosSS = sampleSS;\n        \n        if (distance > 0. && resultVS.a > 0.) {\n            vec3 dir = reflectRay * (SSR_STEP_SIZE * 0.5);\n            for (int j = 0; j < SSR_BINARY_SEARCH_STEPS; ++j) {\n                if (distance > 0.) {\n                    sampleVS -= dir;\n                } else {\n                    sampleVS += dir;\n                }\n                dir *= 0.5;\n                \n                sampleSS4 = u_perspectiveMatrix * vec4(sampleVS, 1.);\n                sampleSS = sampleSS4.xyz / sampleSS4.w;\n                \n                resultVS = GBUFFER_POSITION(sampleSS.xy * 0.5 + 0.5);\n                \n                // hit out-of-bounds somewhere.\n                if (resultVS.a == 0.) {\n                    continue;\n                }\n                \n                distance = resultVS.z - sampleVS.z;\n                if (abs(distance) < minDistance) {\n                    minDistance = abs(distance);\n                    minPosSS = sampleSS;\n                }\n            }\n            \n            // c = vec3(distance);\n            if (abs(minDistance) < 0.05) {\n                float howFar = clamp(length(sampleVS - posVS.xyz) / (float(SSR_STEPS) * SSR_STEP_SIZE), 0., 1.);\n                // the further the sample is from the start and the closer it is to screen edges, the more is attenuation.\n                float attenuation = (1. - howFar) * (1. - smoothstep(.7, .95, abs(sampleSS.x))) * (1. - smoothstep(.7, .95, abs(sampleSS.y)));\n                strength *= attenuation;\n                c = texture(u_lightedSceneTx, minPosSS.xy * 0.5 + 0.5).xyz;\n                isFound = true;\n            }\n            break;\n        }\n    }\n\n    if (!isFound) {\n        strength = 0.;\n    }\n\n    color = vec4(c, strength);\n}\n`);\n\nexport const SSR_SHADERS = {\n    fs: FS,\n};\n","import {Camera, ProjectionMatrix} from \"./camera\";\nimport * as vec3 from \"gl-matrix/src/gl-matrix/vec3\";\nimport * as mat4 from \"gl-matrix/src/gl-matrix/mat4\";\nimport {DirectionalLight, GameObject, GameObjectBuilder, MeshComponent, PointLightComponent} from \"./object\";\nimport {Scene} from \"./scene\";\nimport {FragmentShader, ShaderProgram, ShaderSourceBuilder, VertexShader} from \"./shaders\";\nimport {FINAL_SHADER_SOURCE} from \"./shaders/final\";\nimport {GBUFFER_SHADER_SOURCE} from \"./shaders/gBuffer\";\nimport {SSAO_SHADER_SOURCE} from \"./shaders/ssao\";\nimport {VISUALIZE_LIGHTS_SHADERS} from \"./shaders/visualize-lights\";\nimport {SSAOConfig, SSAOState} from \"./SSAOState\";\nimport {computeDirectionalLightCameraWorldToProjectionMatrix, tmpMat4, tmpProjectionMatrix} from \"./utils\";\nimport {SHADOWMAP_SHADERS} from \"./shaders/shadowMap\";\nimport {GLArrayBufferI} from \"./glArrayBuffer\";\nimport {Material, TextureOrValue} from \"./material\";\nimport {SSR_SHADERS} from \"./shaders/ssr\";\nimport {QUAD_FRAGMENT_INPUTS} from \"./shaders/includes/common\";\nimport {\n    UNIFORM_CAMERA_POSITION,\n    UNIFORM_CAMERA_TO_WORLD_MAT4,\n    UNIFORM_GBUF_ALBEDO,\n    UNIFORM_GBUF_MR,\n    UNIFORM_GBUF_NORMAL,\n    UNIFORM_GBUF_POSITION,\n    UNIFORM_HAS_TANGENT,\n    UNIFORM_MODEL_VIEW_MATRIX,\n    UNIFORM_MODEL_WORLD_MATRIX,\n    UNIFORM_PERSPECTIVE_MATRIX,\n    UNIFORM_WORLD_TO_CAMERA_MAT4\n} from \"./constants\";\nimport {FullScreenQuad} from \"./quad\";\n\nexport class ShadowMapConfig {\n    enabled: boolean;\n    fixedBias: number = 0.001;\n    normalBias: number = 0.001;\n}\n\nexport class SSRConfig {\n    enabled: boolean\n}\n\nexport class DeferredRendererConfig {\n    showLayer: ShowLayer = ShowLayer.Final;\n    normalMapsEnabled: boolean = true;\n    albedoTexturesEnabled: boolean = true;\n    ssao = new SSAOConfig();\n    shadowMap = new ShadowMapConfig();\n    ssr = new SSRConfig();\n\n    showLayerAmong(...values: ShowLayer[]) {\n        return showLayerAmong(this.showLayer, ...values);\n    }\n}\n\nexport enum ShowLayer {\n    Final = 1,\n    Positions,\n    Normals,\n    Color,\n    SSAO,\n    SSR,\n    ShadowMap,\n    Metallic,\n    Roughness\n}\n\nexport const showLayerAmong = (value: ShowLayer, ...among: ShowLayer[]) => {\n    for (let i = 0; i < among.length; i++) {\n        if (value === among[i]) {\n            return true;\n        }\n    }\n};\n\nexport enum StencilValues {\n    NORMAL = 1,\n    SSR = 2,\n}\n\nexport enum StencilBits {\n    TEMP = 1 << 7,\n}\n\n\nfunction bindUniformTx(gl: WebGL2RenderingContext, shader: ShaderProgram, uniformName: string, tx: WebGLTexture, index: number) {\n    gl.activeTexture(gl.TEXTURE0 + index);\n    gl.bindTexture(gl.TEXTURE_2D, tx);\n    gl.uniform1i(shader.getUniformLocation(gl, uniformName), index);\n}\n\nfunction createAndBindBufferTexture(gl: WebGL2RenderingContext, internalFormat: number, format: number, type: number, x?: number, y?: number, filtering?: number): WebGLTexture {\n    x = x || gl.canvas.width;\n    y = y || gl.canvas.height;\n    filtering = filtering || gl.NEAREST;\n\n    let tx = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, tx);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    gl.texImage2D(gl.TEXTURE_2D,\n        0,\n        internalFormat,\n        x,\n        y,\n        0,\n        format,\n        type,\n        null\n    );\n    return tx;\n}\n\nexport function withViewport(gl: WebGL2RenderingContext, x: number, y: number, callback: Function): any {\n    let needReverse = false;\n    if (gl.canvas.width != x || gl.canvas.height != y) {\n        gl.viewport(0, 0, x, y);\n        needReverse = true;\n    }\n    const result = callback();\n    if (needReverse) {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    }\n    return result;\n}\n\nexport class GBuffer {\n    posTx: WebGLTexture;\n    normalTX: WebGLTexture;\n    albedoTX: WebGLTexture;\n    metallicRoughnessTX: WebGLTexture;\n    depthTX: WebGLTexture;\n\n    gFrameBuffer: WebGLFramebuffer;\n    gBufferShader: ShaderProgram;\n\n    defaultMaterial: Material = new Material();\n\n    ATTACHMENT_POSITION = WebGL2RenderingContext.COLOR_ATTACHMENT0;\n    ATTACHMENT_NORMAL = WebGL2RenderingContext.COLOR_ATTACHMENT0 + 1;\n    ATTACHMENT_ALBEDO = WebGL2RenderingContext.COLOR_ATTACHMENT0 + 2;\n    ATTACHMENT_METALLIC_ROUGHNESS = WebGL2RenderingContext.COLOR_ATTACHMENT0 + 3;\n    private config: DeferredRendererConfig;\n\n    constructor(gl: WebGL2RenderingContext, rendererConfig: DeferredRendererConfig) {\n        this.config = rendererConfig;\n        this.setupGBuffer(gl);\n        this.compileShader(gl);\n    }\n\n    render(gl: WebGL2RenderingContext, camera: Camera, scene: Scene) {\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.gFrameBuffer);\n\n        gl.clearColor(0, 0, 0, 0);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\n\n        gl.enable(gl.CULL_FACE);\n        gl.enable(gl.DEPTH_TEST);\n        gl.enable(gl.STENCIL_TEST);\n        gl.stencilMask(0x0f);\n\n        const s = this.gBufferShader;\n        s.use(gl);\n\n        gl.uniform3fv(s.getUniformLocation(gl, UNIFORM_CAMERA_POSITION), camera.position);\n        gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_WORLD_TO_CAMERA_MAT4), false, camera.getWorldToCamera());\n        gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_PERSPECTIVE_MATRIX), false, camera.projectionMatrix().matrix);\n\n        gl.drawBuffers([\n            this.ATTACHMENT_POSITION,\n            this.ATTACHMENT_NORMAL,\n            this.ATTACHMENT_ALBEDO,\n            this.ATTACHMENT_METALLIC_ROUGHNESS\n        ]);\n\n        gl.disable(gl.BLEND);\n\n        for (let i = 0; i < scene.children.length; i++) {\n            this.renderObject(gl, scene.children[i], camera);\n        }\n\n        // restore state.\n        gl.disable(gl.STENCIL_TEST);\n    }\n\n    private bindValueOrTx<T>(gl: WebGL2RenderingContext, prefix: string, txOrValue: TextureOrValue<T>, uniformFunc: string, index: number) {\n        const s = this.gBufferShader;\n        const valueName = prefix;\n        const hasTxName = prefix + \"HasTexture\";\n        const txName = prefix + \"Texture\";\n        const hasFactorName = prefix + \"HasFactor\";\n        const factorName = prefix + \"Factor\";\n\n        gl[uniformFunc](s.getUniformLocation(gl, valueName), txOrValue.value);\n\n        let hasTexture = txOrValue.hasTexture();\n        if (prefix == \"u_albedo\" && !this.config.albedoTexturesEnabled) {\n            hasTexture = false;\n        }\n        gl.uniform1i(s.getUniformLocation(gl, hasTxName), hasTexture ? 1 : 0);\n\n        if (hasTexture) {\n            bindUniformTx(gl, s, txName, txOrValue.texture.getTexture(), index);\n        }\n\n        const hasFactor = txOrValue.hasFactor();\n        gl.uniform1i(s.getUniformLocation(gl, hasFactorName), hasFactor ? 1 : 0);\n        if (hasFactor) {\n            gl[uniformFunc](s.getUniformLocation(gl, factorName), txOrValue.factor);\n        }\n    }\n\n    private renderObject(gl: WebGL2RenderingContext, o: GameObject, camera: Camera) {\n        const s = this.gBufferShader;\n        if (o.mesh != null) {\n            const modelWorldMatrix = o.transform.getModelToWorld();\n            const modelViewMatrix = tmpMat4;\n            const material = o.material ? o.material.material : this.defaultMaterial;\n\n            mat4.multiply(modelViewMatrix, camera.getWorldToCamera(), modelWorldMatrix);\n\n            gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_MODEL_VIEW_MATRIX), false, modelViewMatrix);\n            gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_MODEL_WORLD_MATRIX), false, modelWorldMatrix);\n\n            this.bindValueOrTx(gl, \"u_albedo\", material.albedo, 'uniform4fv', 1);\n            this.bindValueOrTx(gl, \"u_metallic\", material.metallic, 'uniform1f', 2);\n            this.bindValueOrTx(gl, \"u_roughness\", material.roughness, 'uniform1f', 3);\n\n            const hasNormalMap = !!material.normalMap && this.config.normalMapsEnabled;\n            gl.uniform1i(s.getUniformLocation(gl, \"u_normalMapHasTexture\"), (hasNormalMap) ? 1 : 0);\n            if (hasNormalMap) {\n                bindUniformTx(gl, s, \"u_normalMapTx\", material.normalMap.getTexture(), 4);\n            }\n            gl.uniform1i(s.getUniformLocation(gl, UNIFORM_HAS_TANGENT), o.mesh.primitives[0].hasTangent() ? 1 : 0);\n\n            /**\n             * TODO: remove stencils? Not sure, maybe there will be some use for it later.\n             * @deprecated\n             */\n            let stencilValue = StencilValues.NORMAL;\n            if (material.isReflective) {\n                stencilValue = StencilValues.SSR;\n            }\n\n            // always pass and overwrite the stencil value.\n            gl.stencilFunc(gl.ALWAYS, stencilValue, 0xff);\n            gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);\n            o.mesh.draw(gl);\n\n            if (o.boundingBoxComponent && o.boundingBoxComponent.visible) {\n                const buf = o.boundingBoxComponent.asArrayBuffer(gl);\n                buf.draw(gl);\n            }\n        }\n\n        for (let i = 0; i < o.children.length; i++) {\n            this.renderObject(gl, o.children[i], camera);\n        }\n    };\n\n    private compileShader(gl: WebGL2RenderingContext) {\n        this.gBufferShader = new ShaderProgram(\n            gl,\n            new VertexShader(gl, GBUFFER_SHADER_SOURCE.vs),\n            new FragmentShader(gl, GBUFFER_SHADER_SOURCE.fs)\n        );\n    }\n\n    private setupGBuffer(gl: WebGL2RenderingContext) {\n        this.albedoTX = createAndBindBufferTexture(gl, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE);\n        this.metallicRoughnessTX = createAndBindBufferTexture(gl, gl.RG16F, gl.RG, gl.HALF_FLOAT);\n\n        // uncomment to have 16-bit float normals RG\n        // NOT ENOUGH PRECISION, SSR texture jumps around when restoring Z from.\n        // this.normalTX = createAndBindBufferTexture(gl, gl.RG16F, gl.RG, gl.HALF_FLOAT);\n\n        // NOT ENOUGH PRECISION (although better than RG16F)\n        // uncomment to have 8-bit integer normals.\n        // this.normalTX = createAndBindBufferTexture(gl, gl.RGB8, gl.RGB, gl.UNSIGNED_BYTE);\n\n        // uncomment to have 32-bit float normals RG.\n        this.normalTX = createAndBindBufferTexture(gl, gl.RG32F, gl.RG, gl.FLOAT);\n\n        this.posTx = createAndBindBufferTexture(gl, gl.RGBA16F, gl.RGBA, gl.FLOAT);\n        this.depthTX = createAndBindBufferTexture(gl, gl.DEPTH24_STENCIL8, gl.DEPTH_STENCIL, gl.UNSIGNED_INT_24_8);\n        this.gFrameBuffer = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.gFrameBuffer);\n        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, this.ATTACHMENT_POSITION, gl.TEXTURE_2D, this.posTx, 0);\n        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, this.ATTACHMENT_NORMAL, gl.TEXTURE_2D, this.normalTX, 0);\n        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, this.ATTACHMENT_ALBEDO, gl.TEXTURE_2D, this.albedoTX, 0);\n        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, this.ATTACHMENT_METALLIC_ROUGHNESS, gl.TEXTURE_2D, this.metallicRoughnessTX, 0);\n        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.TEXTURE_2D, this.depthTX, 0);\n        checkFrameBufferStatusOrThrow(gl);\n    }\n}\n\nexport class SSAORenderer {\n    private firstPassFB: WebGLFramebuffer;\n    private blurPassFB: WebGLFramebuffer;\n\n    private ssaoConfig: SSAOConfig;\n    private ssaoState: SSAOState;\n    private gBuffer: GBuffer;\n    private fullScreenQuad: FullScreenQuad;\n\n    private firstPassShader: ShaderProgram;\n    private _ssaoFirstPassTx: WebGLTexture;\n    private blurShader: ShaderProgram;\n    private width: number;\n    private height: number;\n    private _ssaoBlurTx: WebGLTexture;\n\n    constructor(gl: WebGL2RenderingContext, ssaoParameters: SSAOState, ssaoConfig: SSAOConfig, gBuffer: GBuffer, fullScreenQuad: FullScreenQuad) {\n        this.ssaoConfig = ssaoConfig;\n        this.gBuffer = gBuffer;\n        this.fullScreenQuad = fullScreenQuad;\n\n        // this.width = gl.canvas.width / 4.0;\n        // this.height = gl.canvas.height / 4.0;\n\n        this.width = gl.canvas.width;\n        this.height = gl.canvas.height;\n\n        this.setupSSAOBuffers(gl, ssaoParameters);\n        this.recompileShaders(gl);\n    }\n\n    get ssaoTx(): WebGLTexture {\n        return this._ssaoBlurTx;\n    }\n\n    onChangeSSAOState(gl: WebGL2RenderingContext) {\n        this.recompileShaders(gl);\n    }\n\n    recompileShaders(gl: WebGL2RenderingContext) {\n        [this.firstPassShader, this.blurShader].forEach(s => {\n            if (s) {\n                s.deleteAll(gl);\n            }\n        });\n\n        // FIRST PASS SHADER\n        this.firstPassShader = new ShaderProgram(\n            gl, this.fullScreenQuad.vertexShader, new FragmentShader(gl,\n                SSAO_SHADER_SOURCE.first_pass_fs\n                    .clone()\n                    .define(\"SSAO_SAMPLES\", this.ssaoConfig.sampleCount.toString())\n                    .build()\n            )\n        );\n\n        this.firstPassShader.use(gl);\n\n        // BLUR SHADER\n        this.blurShader = new ShaderProgram(\n            gl, this.fullScreenQuad.vertexShader, new FragmentShader(gl,\n                SSAO_SHADER_SOURCE.blur_pass_fs\n                    .clone()\n                    .define(\"SSAO_NOISE_SCALE\", this.ssaoConfig.noiseScale.toString())\n                    .define(\"SSAO_TEXEL_SIZE_X\", this.width.toString())\n                    .define(\"SSAO_TEXEL_SIZE_Y\", this.height.toString())\n                    .build()\n            )\n        );\n        this.blurShader.use(gl);\n    }\n\n    render(gl: WebGL2RenderingContext, camera: Camera) {\n\n        const firstPass = () => {\n            const s = this.firstPassShader;\n            s.use(gl);\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.firstPassFB);\n            gl.clearColor(0., 0, 0, 1.);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n            this.fullScreenQuad.bind(gl);\n\n            // Common uniforms\n            gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_WORLD_TO_CAMERA_MAT4), false, camera.getWorldToCamera());\n            gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_PERSPECTIVE_MATRIX), false, camera.projectionMatrix().matrix);\n\n            // SSAOState\n            gl.uniform1f(s.getUniformLocation(gl, \"u_ssaoRadius\"), this.ssaoConfig.radius);\n            gl.uniform1f(s.getUniformLocation(gl, \"u_ssaoBias\"), this.ssaoConfig.bias);\n            gl.uniform3fv(s.getUniformLocation(gl, \"u_ssaoSamples\"), this.ssaoState.tangentSpaceSamples);\n            gl.uniform2fv(\n                s.getUniformLocation(gl, \"u_ssaoNoiseScale\"),\n                [this.width / this.ssaoConfig.noiseScale, this.height / this.ssaoConfig.noiseScale]\n            );\n\n            bindUniformTx(gl, this.firstPassShader, UNIFORM_GBUF_POSITION, this.gBuffer.posTx, 0);\n            bindUniformTx(gl, this.firstPassShader, UNIFORM_GBUF_NORMAL, this.gBuffer.normalTX, 1);\n            bindUniformTx(gl, this.firstPassShader, \"u_ssaoNoise\", this.ssaoState.noiseTexture, 2);\n\n            // Draw\n            withViewport(gl, this.width, this.height, () => {\n                this.fullScreenQuad.draw(gl);\n            })\n        };\n\n        const blurPass = () => {\n            const s = this.blurShader;\n            s.use(gl);\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.blurPassFB);\n            gl.clearColor(0., 0, 0, 1.);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n            this.fullScreenQuad.bind(gl);\n\n            // Common uniforms\n            gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_WORLD_TO_CAMERA_MAT4), false, camera.getWorldToCamera());\n            gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_PERSPECTIVE_MATRIX), false, camera.projectionMatrix().matrix);\n\n            // SSAOState\n            gl.uniform1f(s.getUniformLocation(gl, \"u_ssaoStrength\"), this.ssaoConfig.strength);\n            gl.uniform1f(s.getUniformLocation(gl, \"u_ssaoBias\"), this.ssaoConfig.bias);\n            gl.uniform1f(s.getUniformLocation(gl, \"u_ssaoBlurPositionThreshold\"), this.ssaoConfig.blurPositionThreshold);\n            gl.uniform1f(s.getUniformLocation(gl, \"u_ssaoBlurNormalThreshold\"), this.ssaoConfig.blurNormalThreshold);\n            gl.uniform3fv(s.getUniformLocation(gl, \"u_ssaoSamples\"), this.ssaoState.tangentSpaceSamples);\n\n            gl.uniform2fv(\n                s.getUniformLocation(gl, \"u_ssaoNoiseScale\"),\n                [gl.canvas.width / this.ssaoConfig.noiseScale, gl.canvas.height / this.ssaoConfig.noiseScale]\n            );\n\n            bindUniformTx(gl, this.blurShader, UNIFORM_GBUF_POSITION, this.gBuffer.posTx, 0);\n            bindUniformTx(gl, this.blurShader, UNIFORM_GBUF_NORMAL, this.gBuffer.normalTX, 1);\n            bindUniformTx(gl, this.blurShader, \"u_ssaoNoise\", this.ssaoState.noiseTexture, 2);\n            bindUniformTx(gl, this.blurShader, \"u_ssaoFirstPassTx\", this._ssaoFirstPassTx, 3);\n\n            this.fullScreenQuad.draw(gl);\n        };\n\n        firstPass();\n        blurPass();\n    }\n\n    private setupSSAOBuffers(gl: WebGL2RenderingContext, ssaoState: SSAOState) {\n        this.ssaoState = ssaoState;\n\n        this.firstPassFB = gl.createFramebuffer();\n        this._ssaoFirstPassTx = createAndBindBufferTexture(gl, gl.R16F, gl.RED, gl.HALF_FLOAT, this.width, this.height);\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.firstPassFB);\n        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._ssaoFirstPassTx, 0);\n        checkFrameBufferStatusOrThrow(gl);\n\n        this.blurPassFB = gl.createFramebuffer();\n        this._ssaoBlurTx = createAndBindBufferTexture(gl, gl.R16F, gl.RED, gl.HALF_FLOAT);\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.blurPassFB);\n        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._ssaoBlurTx, 0);\n        checkFrameBufferStatusOrThrow(gl);\n    }\n}\n\nexport class ShadowMapRenderer {\n    private shadowMapFB: WebGLFramebuffer;\n    private shadowMapShader: ShaderProgram;\n\n    constructor(gl: WebGL2RenderingContext) {\n        this.setupShadowMapBuffers(gl);\n        this.recompileShaders(gl);\n    }\n\n    private _shadowMapTx: WebGLTexture;\n\n    get shadowMapTx(): WebGLTexture {\n        return this._shadowMapTx;\n    }\n\n    private _shadowMapWidth: number;\n\n    get shadowMapWidth(): number {\n        return this._shadowMapWidth;\n    }\n\n    private _shadowMapHeight: number;\n\n    get shadowMapHeight(): number {\n        return this._shadowMapHeight;\n    }\n\n    render(gl: WebGL2RenderingContext, lightCameraWorldToProjectionMatrix: ProjectionMatrix, scene: Scene) {\n        gl.enable(gl.DEPTH_TEST);\n        gl.enable(gl.CULL_FACE);\n\n        const s = this.shadowMapShader;\n\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.shadowMapFB);\n\n        gl.clearColor(0., 0, 0., 1.);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        s.use(gl);\n\n        gl.uniformMatrix4fv(s.getUniformLocation(gl, \"u_lightCameraWorldToProjectionMatrix\"), false, lightCameraWorldToProjectionMatrix.matrix);\n\n        const drawObject = (o: GameObject) => {\n            o.children.forEach(drawObject);\n\n            if (!o.mesh) {\n                return;\n            }\n            if (!o.mesh.shadowCaster && !o.mesh.shadowReceiver) {\n                return;\n            }\n\n            gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_MODEL_WORLD_MATRIX), false, o.transform.getModelToWorld());\n            o.mesh.draw(gl);\n        };\n\n        withViewport(gl, this._shadowMapWidth, this._shadowMapHeight, () => {\n            scene.children.forEach(drawObject);\n        });\n    }\n\n    private recompileShaders(gl: WebGL2RenderingContext) {\n        this.shadowMapShader = new ShaderProgram(\n            gl,\n            new VertexShader(\n                gl,\n                SHADOWMAP_SHADERS.vs\n                    .build(),\n            ),\n            new FragmentShader(\n                gl,\n                SHADOWMAP_SHADERS.fs\n                    .build(),\n            )\n        );\n    }\n\n    private setupShadowMapBuffers(gl: WebGL2RenderingContext) {\n        this._shadowMapWidth = 2048;\n        this._shadowMapHeight = 2048;\n\n        this._shadowMapTx = createAndBindBufferTexture(gl, gl.DEPTH_COMPONENT16, gl.DEPTH_COMPONENT, gl.UNSIGNED_SHORT, this._shadowMapWidth, this._shadowMapHeight, gl.NEAREST);\n        this.shadowMapFB = gl.createFramebuffer();\n\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.shadowMapFB);\n        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this._shadowMapTx, 0);\n        checkFrameBufferStatusOrThrow(gl);\n    }\n}\n\nexport class LightingRenderer {\n    resultTX: WebGLTexture;\n    private showBuffersShader: ShaderProgram = null;\n    private directionalLightShader: ShaderProgram = null;\n    private pointLightShader: ShaderProgram = null;\n    private fullScreenQuad: FullScreenQuad;\n    private config: DeferredRendererConfig;\n    private gBuffer: GBuffer;\n    private ssaoRenderer: SSAORenderer;\n    private shadowMapRenderer: ShadowMapRenderer;\n    private visualizeLightsShader: ShaderProgram;\n    private _recompileOnNextRun: boolean = true;\n    private sphereObject: GameObject;\n    private fb: WebGLFramebuffer;\n\n    constructor(gl: WebGL2RenderingContext,\n                config: DeferredRendererConfig,\n                fullScreenQuad: FullScreenQuad,\n                gBuffer: GBuffer,\n                ssaoRenderer: SSAORenderer,\n                shadowMapRenderer: ShadowMapRenderer,\n                sphereMesh: GLArrayBufferI) {\n        this.fullScreenQuad = fullScreenQuad;\n        this.gBuffer = gBuffer;\n        this.ssaoRenderer = ssaoRenderer;\n        this.shadowMapRenderer = shadowMapRenderer;\n        this.sphereObject = new GameObjectBuilder(\"sphere\")\n            .setMeshComponent(new MeshComponent(sphereMesh))\n            .build();\n        this.config = config;\n\n        this.fb = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb);\n        this.resultTX = createAndBindBufferTexture(gl, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE);\n        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.resultTX, 0);\n        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.TEXTURE_2D, this.gBuffer.depthTX, 0);\n        checkFrameBufferStatusOrThrow(gl);\n\n        this.visualizeLightsShader = new ShaderProgram(\n            gl,\n            new VertexShader(gl, VISUALIZE_LIGHTS_SHADERS.vs.build()),\n            new FragmentShader(gl, VISUALIZE_LIGHTS_SHADERS.FS.build())\n        );\n\n        this.recompileOnNextRun();\n    }\n\n    recompileOnNextRun() {\n        this._recompileOnNextRun = true;\n    }\n\n    recompileShaders(gl: WebGL2RenderingContext) {\n        [this.showBuffersShader, this.pointLightShader, this.directionalLightShader].forEach(s => {\n            if (s) {\n                s.deleteAll(gl);\n            }\n        });\n\n        this.showBuffersShader = new ShaderProgram(\n            gl,\n            this.fullScreenQuad.vertexShader,\n            new FragmentShader(\n                gl,\n                FINAL_SHADER_SOURCE.showLayerFS\n                    .clone()\n                    .define('SCREEN_WIDTH', gl.canvas.width.toString())\n                    .define('SCREEN_HEIGHT', gl.canvas.height.toString())\n                    .define('SHADOW_MAP_WIDTH', `${this.shadowMapRenderer.shadowMapWidth}.`)\n                    .define('SHADOW_MAP_HEIGHT', `${this.shadowMapRenderer.shadowMapHeight}.`)\n                    .defineIfTrue('SSAO_ENABLED', this.config.ssao.isEnabled())\n                    .defineIfTrue('SHADOWMAP_ENABLED', this.config.shadowMap.enabled)\n                    .defineIfTrue('SHOW_SSAO', this.config.showLayer === ShowLayer.SSAO)\n                    .defineIfTrue('SHOW_COLORS', this.config.showLayer === ShowLayer.Color)\n                    .defineIfTrue('SHOW_POSITIONS', this.config.showLayer === ShowLayer.Positions)\n                    .defineIfTrue('SHOW_SHADOWMAP', this.config.showLayer === ShowLayer.ShadowMap)\n                    .defineIfTrue('SHOW_NORMALS', this.config.showLayer === ShowLayer.Normals)\n                    .defineIfTrue('SHOW_METALLIC', this.config.showLayer === ShowLayer.Metallic)\n                    .defineIfTrue('SHOW_ROUGHNESS', this.config.showLayer === ShowLayer.Roughness)\n                    .build()\n            )\n        );\n        this.showBuffersShader.use(gl);\n\n        this.directionalLightShader = new ShaderProgram(\n            gl,\n            this.fullScreenQuad.vertexShader,\n            new FragmentShader(\n                gl,\n                FINAL_SHADER_SOURCE.fs\n                    .clone()\n                    .define('SCREEN_WIDTH', gl.canvas.width.toString())\n                    .define('SCREEN_HEIGHT', gl.canvas.height.toString())\n                    .define('SHADOW_MAP_WIDTH', `${this.shadowMapRenderer.shadowMapWidth}.`)\n                    .define('SHADOW_MAP_HEIGHT', `${this.shadowMapRenderer.shadowMapHeight}.`)\n                    .define('AMBIENT_CONSTANT_HACK', '0.03')\n                    .define('DIRECTIONAL_LIGHT', '')\n                    .defineIfTrue('SSAO_ENABLED', this.config.ssao.isEnabled())\n                    .defineIfTrue('SHADOWMAP_ENABLED', this.config.shadowMap.enabled)\n                    .build()\n            )\n        );\n        this.directionalLightShader.use(gl);\n\n        this.pointLightShader = new ShaderProgram(\n            gl,\n            new VertexShader(gl, FINAL_SHADER_SOURCE.pointLightSphere.build()),\n            new FragmentShader(\n                gl,\n                FINAL_SHADER_SOURCE.fs\n                    .clone()\n                    .define('SCREEN_WIDTH', gl.canvas.width.toString())\n                    .define('SCREEN_HEIGHT', gl.canvas.height.toString())\n                    .define('SHADOW_MAP_WIDTH', `${this.shadowMapRenderer.shadowMapWidth}.`)\n                    .define('SHADOW_MAP_HEIGHT', `${this.shadowMapRenderer.shadowMapHeight}.`)\n                    .define('AMBIENT_CONSTANT_HACK', '0.03')\n                    .define('POINT_LIGHT', '')\n                    .defineIfTrue('SSAO_ENABLED', this.config.ssao.isEnabled())\n                    // .defineIfTrue('SHADOWMAP_ENABLED', this.config.shadowMap.enabled)\n                    .build()\n            )\n        );\n        this.pointLightShader.use(gl);\n        bindUniformTx(gl, this.pointLightShader, UNIFORM_GBUF_POSITION, this.gBuffer.posTx, 0);\n        bindUniformTx(gl, this.pointLightShader, UNIFORM_GBUF_NORMAL, this.gBuffer.normalTX, 1);\n        bindUniformTx(gl, this.pointLightShader, UNIFORM_GBUF_ALBEDO, this.gBuffer.albedoTX, 2);\n        bindUniformTx(gl, this.pointLightShader, UNIFORM_GBUF_MR, this.gBuffer.metallicRoughnessTX, 3);\n        bindUniformTx(gl, this.pointLightShader, \"u_shadowmapTx\", this.shadowMapRenderer.shadowMapTx, 4);\n        bindUniformTx(gl, this.pointLightShader, \"u_ssaoTx\", this.ssaoRenderer.ssaoTx, 5);\n\n        this._recompileOnNextRun = false;\n    }\n\n    render(gl: WebGL2RenderingContext, scene: Scene, camera: Camera) {\n        if (this._recompileOnNextRun) {\n            this.recompileShaders(gl);\n        }\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb);\n\n        // No need for depth test when rendering full-screen framebuffers.\n        gl.disable(gl.DEPTH_TEST);\n        gl.clearColor(0, 0, 0, 1.);\n\n        // NO depth clearing here.\n        // No stencil clearing too as it may contain important information in bits other than TEMP.\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        if (!this.config.showLayerAmong(ShowLayer.Final, ShowLayer.SSR)) {\n            if (this.config.showLayer === ShowLayer.ShadowMap) {\n                this.shadowMapRenderer.render(gl, computeDirectionalLightCameraWorldToProjectionMatrix(\n                    scene.directionalLights[0], camera, scene, tmpProjectionMatrix\n                ), scene);\n                gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb);\n            }\n            const s = this.showBuffersShader.use(gl);\n            bindUniformTx(gl, this.showBuffersShader, UNIFORM_GBUF_POSITION, this.gBuffer.posTx, 0);\n            bindUniformTx(gl, this.showBuffersShader, UNIFORM_GBUF_NORMAL, this.gBuffer.normalTX, 1);\n            bindUniformTx(gl, this.showBuffersShader, UNIFORM_GBUF_ALBEDO, this.gBuffer.albedoTX, 2);\n            bindUniformTx(gl, this.showBuffersShader, UNIFORM_GBUF_MR, this.gBuffer.metallicRoughnessTX, 3);\n            bindUniformTx(gl, this.showBuffersShader, \"u_shadowmapTx\", this.shadowMapRenderer.shadowMapTx, 4);\n            bindUniformTx(gl, this.showBuffersShader, \"u_ssaoTx\", this.ssaoRenderer.ssaoTx, 5);\n            this.fullScreenQuad.draw(gl);\n            return;\n        }\n\n\n        gl.enable(gl.STENCIL_TEST);\n\n        const setStencilOnlyNormal = () => {\n            gl.stencilFunc(gl.EQUAL, StencilValues.NORMAL, 0x0f);\n            gl.stencilMask(0x00);\n            gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n        };\n\n        setStencilOnlyNormal();\n\n        scene.directionalLights.forEach((light, i) => {\n            let lightCameraWorldToProjectionMatrix = null;\n\n            if (this.config.shadowMap.enabled) {\n                lightCameraWorldToProjectionMatrix = computeDirectionalLightCameraWorldToProjectionMatrix(\n                    light, camera, scene, tmpProjectionMatrix\n                );\n                gl.disable(gl.STENCIL_TEST);\n                this.shadowMapRenderer.render(gl, lightCameraWorldToProjectionMatrix, scene);\n\n                // Bind back the null framebuffer.\n                gl.disable(gl.DEPTH_TEST);\n                gl.enable(gl.STENCIL_TEST);\n                gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb);\n            }\n\n            gl.enable(gl.BLEND);\n\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n            gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE);\n\n            let s = this.directionalLightShader;\n            s.use(gl);\n\n            // Shadow map stuff\n            gl.uniform1f(s.getUniformLocation(gl, \"u_shadowMapFixedBias\"), this.config.shadowMap.fixedBias);\n            gl.uniform1f(s.getUniformLocation(gl, \"u_shadowMapNormalBias\"), this.config.shadowMap.normalBias);\n\n            // Common uniforms\n            gl.uniform3fv(s.getUniformLocation(gl, UNIFORM_CAMERA_POSITION), camera.position);\n            gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_WORLD_TO_CAMERA_MAT4), false, camera.getWorldToCamera());\n            gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_PERSPECTIVE_MATRIX), false, camera.projectionMatrix().matrix);\n            gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_CAMERA_TO_WORLD_MAT4), false, camera.getCameraToWorld());\n\n            if (this.config.shadowMap.enabled) {\n                const cameraViewSpaceToLightCamera = tmpMat4;\n                mat4.multiply(cameraViewSpaceToLightCamera, lightCameraWorldToProjectionMatrix.matrix, camera.getCameraToWorld());\n                gl.uniformMatrix4fv(s.getUniformLocation(gl, \"u_cameraViewSpaceToLightCamera\"), false, cameraViewSpaceToLightCamera);\n                gl.uniform1f(s.getUniformLocation(gl, \"u_lightNear\"), lightCameraWorldToProjectionMatrix.near);\n                gl.uniform1f(s.getUniformLocation(gl, \"u_lightFar\"), lightCameraWorldToProjectionMatrix.far);\n            }\n\n            gl.uniform3fv(s.getUniformLocation(gl, \"u_lightData\"), this.generateDirectionalLightData(light));\n\n            bindUniformTx(gl, s, UNIFORM_GBUF_POSITION, this.gBuffer.posTx, 0);\n            bindUniformTx(gl, s, UNIFORM_GBUF_NORMAL, this.gBuffer.normalTX, 1);\n            bindUniformTx(gl, s, UNIFORM_GBUF_ALBEDO, this.gBuffer.albedoTX, 2);\n            bindUniformTx(gl, s, UNIFORM_GBUF_MR, this.gBuffer.metallicRoughnessTX, 3);\n            bindUniformTx(gl, s, \"u_shadowmapTx\", this.shadowMapRenderer.shadowMapTx, 4);\n            bindUniformTx(gl, s, \"u_ssaoTx\", this.ssaoRenderer.ssaoTx, 5);\n\n            this.fullScreenQuad.draw(gl);\n        });\n\n        const renderPointLights = () => {\n            const s = this.pointLightShader;\n            const obj = new GameObject(\"sphere\");\n            const tc = obj.transform;\n            const modelView = tmpMat4;\n            s.use(gl);\n\n            gl.enable(gl.BLEND);\n            gl.enable(gl.DEPTH_TEST);\n            gl.enable(gl.CULL_FACE);\n            gl.enable(gl.STENCIL_TEST);\n            gl.stencilMask(StencilBits.TEMP);\n            gl.depthMask(false);\n\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n            gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE);\n\n            // Shadow map stuff\n            gl.uniform1f(s.getUniformLocation(gl, \"u_shadowMapFixedBias\"), this.config.shadowMap.fixedBias);\n            gl.uniform1f(s.getUniformLocation(gl, \"u_shadowMapNormalBias\"), this.config.shadowMap.normalBias);\n\n            // Common uniforms\n            gl.uniform3fv(s.getUniformLocation(gl, UNIFORM_CAMERA_POSITION), camera.position);\n            gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_WORLD_TO_CAMERA_MAT4), false, camera.getWorldToCamera());\n            gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_PERSPECTIVE_MATRIX), false, camera.projectionMatrix().matrix);\n            gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_CAMERA_TO_WORLD_MAT4), false, camera.getCameraToWorld());\n\n            bindUniformTx(gl, s, UNIFORM_GBUF_POSITION, this.gBuffer.posTx, 0);\n            bindUniformTx(gl, s, UNIFORM_GBUF_NORMAL, this.gBuffer.normalTX, 1);\n            bindUniformTx(gl, s, UNIFORM_GBUF_ALBEDO, this.gBuffer.albedoTX, 2);\n            bindUniformTx(gl, s, UNIFORM_GBUF_MR, this.gBuffer.metallicRoughnessTX, 3);\n            bindUniformTx(gl, s, \"u_shadowmapTx\", this.shadowMapRenderer.shadowMapTx, 4);\n            bindUniformTx(gl, s, \"u_ssaoTx\", this.ssaoRenderer.ssaoTx, 5);\n\n            scene.pointLights.forEach(light => {\n                // NO shadow map support yet.\n                gl.uniform3fv(s.getUniformLocation(gl, \"u_lightData\"), this.generatePointLightData(light));\n\n                // 2 is because the sphere mesh is of diameter 1 (radius 0.5), so we scale it to radius = 1.\n                // 2.1 is to round the imperfect sphere shape, as it is very low poly.\n                const scale = (light.radius) * 2.1;\n                tc.scale = vec3.fromValues(scale, scale, scale);\n                vec3.copy(tc.position, light.object.transform.position);\n                tc.update();\n\n                mat4.multiply(modelView, camera.getWorldToCamera(), tc.getModelToWorld());\n\n                gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_MODEL_VIEW_MATRIX), false, modelView);\n                gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_WORLD_TO_CAMERA_MAT4), false, camera.getWorldToCamera());\n\n                // https://kayru.org/articles/deferred-stencil/\n\n                // first pass\n                gl.depthFunc(gl.LEQUAL);\n                gl.cullFace(gl.BACK);\n                gl.colorMask(false, false, false, false);\n                // stencil function will ALWAYS pass, BUT it will set the TEMP bit\n                // for all front-facing faces that are occluded by scene geometry.\n                // if they are occluded, it's not possible for them to be lighted.\n                // this is used in the second pass.\n                gl.stencilFunc(gl.ALWAYS, StencilBits.TEMP, StencilBits.TEMP);\n                gl.stencilOp(gl.KEEP, gl.REPLACE, gl.KEEP);\n                this.sphereObject.mesh.primitives[0].draw(gl);\n\n                // second pass\n                gl.depthFunc(gl.GEQUAL);\n                gl.cullFace(gl.FRONT);\n                gl.colorMask(true, true, true, true);\n                // only renders the BACK parts of the light that ARE occluded by scene geometry (using GEQUAL depth func)\n                // BUT WHERE the front part of the sphere is NOT occluded by scene geometry using the TEMP bit\n                // from the previous pass.\n                // essentially this only will light up the pixels that are within the volume light's sphere.\n                gl.stencilFunc(gl.EQUAL, StencilValues.NORMAL, StencilBits.TEMP | 0x0f);\n                gl.stencilOp(gl.ZERO, gl.ZERO, gl.ZERO);\n                this.sphereObject.mesh.primitives[0].draw(gl);\n            });\n\n            // Restore state.\n            gl.depthMask(true);\n            gl.depthFunc(gl.LEQUAL);\n            gl.disable(gl.STENCIL_TEST);\n            gl.stencilMask(0xff);\n            gl.cullFace(gl.BACK);\n        };\n\n        renderPointLights();\n\n        // if (this.config.showLayer === ShowLayer.Final) {\n        //     this.renderLightVolumes(gl, camera, scene);\n        // }\n    }\n\n    // private renderLightVolumes(gl: WebGL2RenderingContext, camera: Camera, scene: Scene) {\n    //     const s = this.visualizeLightsShader;\n    //     gl.useProgram(s.getProgram());\n    //\n    //     gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_WORLD_TO_CAMERA_MAT4), false, camera.getWorldToCamera());\n    //     gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_PERSPECTIVE_MATRIX), false, camera.projectionMatrix().matrix);\n    //\n    //     this.sphereMesh.prepareMeshVertexAndShaderDataForRendering(gl, s);\n    //\n    //     gl.enable(gl.DEPTH_TEST);\n    //     gl.enable(gl.BLEND);\n    //     gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    //     gl.clear(gl.DEPTH_BUFFER_BIT);\n    //\n    //     bindUniformTx(gl, s, \"u_posTexture\", this.gBuffer.posTx, 0);\n    //\n    //     scene.pointLights.forEach(light => {\n    //         const modelWorldMatrix = light.transform.getModelToWorld();\n    //         const modelViewMatrix = tmpMat4;\n    //\n    //         mat4.multiply(modelViewMatrix, camera.getWorldToCamera(), modelWorldMatrix);\n    //\n    //         gl.uniform3fv(s.getUniformLocation(gl, \"u_color\"), light.light.diffuse);\n    //         gl.uniform1f(s.getUniformLocation(gl, \"u_intensity\"), light.light.intensity);\n    //         gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_MODEL_VIEW_MATRIX), false, modelViewMatrix);\n    //         gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_MODEL_WORLD_MATRIX), false, modelWorldMatrix);\n    //\n    //         this.sphereMesh.draw(gl);\n    //     })\n    // }\n\n    private generateDirectionalLightData(l: DirectionalLight): Float32List {\n        let result: number[] = [];\n        result.push(...l.direction);\n        result.push(...l.color);\n        // the 2 zeroes are unused.\n        result.push(l.intensity, 0, 0);\n        return new Float32Array(result);\n    }\n\n    private generatePointLightData(l: PointLightComponent): Float32List {\n        let result: number[] = [];\n        result.push(...l.object.transform.position);\n        result.push(...l.color);\n        result.push(l.intensity, l.radius, 0);\n        return new Float32Array(result);\n    }\n}\n\n\nclass SSRRenderer {\n    blendShader: ShaderProgram;\n    private gbuffer: GBuffer;\n    private lightingRenderer: LightingRenderer;\n    private shader: ShaderProgram;\n    private fullScreenQuad: FullScreenQuad;\n    private fb: WebGLFramebuffer;\n\n    constructor(gl: WebGL2RenderingContext, config: DeferredRendererConfig, gbuffer: GBuffer, light: LightingRenderer, fullScreenQuad: FullScreenQuad) {\n        this.fullScreenQuad = fullScreenQuad;\n\n        this.fb = gl.createFramebuffer();\n        this.lightingRenderer = light;\n        this.gbuffer = gbuffer;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb);\n        this._resultTX = createAndBindBufferTexture(gl, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE);\n        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._resultTX, 0);\n        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.TEXTURE_2D, gbuffer.depthTX, 0);\n        checkFrameBufferStatusOrThrow(gl);\n\n        this.shader = new ShaderProgram(\n            gl,\n            fullScreenQuad.vertexShader,\n            new FragmentShader(gl, SSR_SHADERS.fs\n                .define('SSR_STEPS', '90')\n                .define('SSR_STEP_SIZE', '0.15')\n                .define('SSR_BINARY_SEARCH_STEPS', '10')\n                .build()\n            ),\n        );\n\n        this.blendShader = new ShaderProgram(\n            gl,\n            fullScreenQuad.vertexShader,\n            new FragmentShader(gl, new ShaderSourceBuilder().addTopChunk(QUAD_FRAGMENT_INPUTS).addChunk(`\n            uniform sampler2D u_lightedSceneTx;\n            uniform sampler2D u_ssrTx;\n            out vec4 color;\n            void main() {\n                vec4 l = texture(u_lightedSceneTx, tx_pos);\n                vec4 s = texture(u_ssrTx, tx_pos);\n                // color = vec4(max(l.rgb, s.rgb), l.a);\n                // color = vec4(mix(l.rgb, max(s.rgb * s.a, l.rgb), s.a), l.a);\n                color = vec4(mix(l.rgb, s.rgb, s.a), l.a);\n            }\n            `).build())\n        )\n    }\n\n    private _resultTX: WebGLTexture;\n\n    get resultTX(): WebGLTexture {\n        return this._resultTX;\n    }\n\n    render(gl: WebGL2RenderingContext, scene: Scene, camera: Camera) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb);\n        gl.clearColor(0, 0, 0, 0);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        gl.disable(gl.DEPTH_TEST);\n        // gl.enable(gl.STENCIL_TEST);\n        // gl.stencilMask(0x00);\n\n        // gl.stencilFunc(gl.EQUAL, StencilValues.SSR,0x0f);\n        // gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n\n        const s = this.shader;\n        s.use(gl);\n\n        bindUniformTx(gl, s, \"u_lightedSceneTx\", this.lightingRenderer.resultTX, 0);\n        bindUniformTx(gl, s, UNIFORM_GBUF_NORMAL, this.gbuffer.normalTX, 1);\n        bindUniformTx(gl, s, UNIFORM_GBUF_POSITION, this.gbuffer.posTx, 2);\n        bindUniformTx(gl, s, UNIFORM_GBUF_MR, this.gbuffer.metallicRoughnessTX, 3);\n        gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_WORLD_TO_CAMERA_MAT4), false, camera.getWorldToCamera());\n        gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_CAMERA_TO_WORLD_MAT4), false, camera.getCameraToWorld());\n        gl.uniformMatrix4fv(s.getUniformLocation(gl, UNIFORM_PERSPECTIVE_MATRIX), false, camera.projectionMatrix().matrix);\n\n        // full screen quad final draw\n        this.fullScreenQuad.draw(gl);\n    }\n\n    blend(gl: WebGL2RenderingContext, targetFB: WebGLFramebuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, targetFB);\n        const s = this.blendShader;\n        s.use(gl);\n\n        bindUniformTx(gl, s, \"u_lightedSceneTx\", this.lightingRenderer.resultTX, 0);\n        bindUniformTx(gl, s, \"u_ssrTx\", this.resultTX, 1);\n\n        this.fullScreenQuad.draw(gl);\n    }\n}\n\nclass CopierShader {\n    constructor(gl: WebGL2RenderingContext, fullScreenQuad: FullScreenQuad) {\n        this._shader = new ShaderProgram(\n            gl,\n            fullScreenQuad.vertexShader,\n            new FragmentShader(gl, new ShaderSourceBuilder().addTopChunk(QUAD_FRAGMENT_INPUTS).addChunk(`\n            uniform sampler2D tx;\n            out vec4 color;\n            void main() {\n                color = texture(tx, tx_pos);\n            }\n            `).build())\n        );\n    }\n\n    private _shader: ShaderProgram;\n\n    get shader(): ShaderProgram {\n        return this._shader;\n    }\n}\n\n\nclass TextureToFbCopier {\n    tx: WebGLTexture;\n    private targetFB: GLint;\n    private fsq: FullScreenQuad;\n    private shader: CopierShader;\n\n    constructor(gl: WebGL2RenderingContext, tx: WebGLTexture, targetFramebuffer: GLint, shader: CopierShader, fullScreenQuad: FullScreenQuad) {\n        this.tx = tx;\n        this.targetFB = targetFramebuffer;\n        this.fsq = fullScreenQuad;\n        this.shader = shader;\n    }\n\n    copy(gl: WebGL2RenderingContext) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.targetFB);\n        const s = this.shader.shader;\n        s.use(gl);\n        bindUniformTx(gl, s, \"tx\", this.tx, 0);\n        this.fsq.draw(gl);\n    }\n}\n\n\nexport class DeferredRenderer {\n    private lightingRenderer: LightingRenderer;\n    private gl: WebGL2RenderingContext;\n    private gbuffer: GBuffer;\n    private ssaoRenderer: SSAORenderer;\n    private shadowMap: ShadowMapRenderer;\n    private recompileOnNextRun: boolean = false;\n    private ssr: SSRRenderer;\n    private finalToDefaultFB: TextureToFbCopier;\n    private ssrToDefaultFB: TextureToFbCopier;\n\n    constructor(gl: WebGL2RenderingContext, config: DeferredRendererConfig, fullScreenQuad: FullScreenQuad, sphere: GLArrayBufferI, ssaoState?: SSAOState) {\n        this.gl = gl;\n        this._config = config;\n        this.gbuffer = new GBuffer(gl, config);\n        this.ssaoRenderer = new SSAORenderer(gl, ssaoState, this._config.ssao, this.gbuffer, fullScreenQuad);\n        this.shadowMap = new ShadowMapRenderer(gl);\n        this.lightingRenderer = new LightingRenderer(\n            gl, this.config, fullScreenQuad, this.gbuffer, this.ssaoRenderer, this.shadowMap, sphere\n        );\n        this.ssr = new SSRRenderer(\n            gl, this.config, this.gbuffer, this.lightingRenderer, fullScreenQuad\n        );\n\n        const copierShader = new CopierShader(gl, fullScreenQuad);\n        this.finalToDefaultFB = new TextureToFbCopier(gl, this.lightingRenderer.resultTX, null, copierShader, fullScreenQuad);\n        this.ssrToDefaultFB = new TextureToFbCopier(gl, this.ssr.resultTX, null, copierShader, fullScreenQuad);\n    }\n\n    private _config: DeferredRendererConfig;\n\n    get config(): DeferredRendererConfig {\n        return this._config;\n    }\n\n    onChangeSSAOState() {\n        this.ssaoRenderer.onChangeSSAOState(this.gl);\n        this.lightingRenderer.recompileOnNextRun();\n    }\n\n    recompileShaders() {\n        this.recompileOnNextRun = true;\n    }\n\n    render(scene: Scene, camera: Camera) {\n        const gl: WebGL2RenderingContext = this.gl;\n\n        if (this.recompileOnNextRun) {\n            this.ssaoRenderer.recompileShaders(gl);\n            this.lightingRenderer.recompileOnNextRun();\n            this.recompileOnNextRun = false;\n        }\n\n        this.gbuffer.render(gl, camera, scene);\n        if (this._config.ssao.isEnabled()) {\n            this.ssaoRenderer.render(gl, camera);\n        }\n\n        this.lightingRenderer.render(gl, scene, camera);\n\n        if (this.config.ssr.enabled && this._config.showLayerAmong(ShowLayer.Final, ShowLayer.SSR)) {\n            this.ssr.render(gl, scene, camera);\n        }\n\n        // TODO: move \"show layers\" to the end here, not to the lighting shader.\n        // this.finalToDefaultFB.copy(gl);\n\n        switch (this.config.ssr.enabled) {\n            case true:\n                switch (this.config.showLayer) {\n                    case ShowLayer.Final:\n                        gl.disable(gl.BLEND);\n                        this.ssr.blend(gl, null);\n                        // gl.clearColor(0, 0, 0, 1);\n                        // gl.clear(gl.COLOR_BUFFER_BIT);\n                        break;\n                    case ShowLayer.SSR:\n                        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n                        gl.enable(gl.BLEND);\n                        gl.clearColor(0, 0, 0, 1);\n                        gl.clear(gl.COLOR_BUFFER_BIT);\n                        gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n                        this.ssrToDefaultFB.copy(gl);\n                        break;\n                    default:\n                        this.finalToDefaultFB.copy(gl);\n                }\n                break;\n            case false:\n                this.finalToDefaultFB.copy(gl);\n                break;\n        }\n    }\n\n}\n\nfunction checkFrameBufferStatusOrThrow(gl: WebGL2RenderingContext) {\n    // return true;\n    const fbStatus = gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER);\n    if (fbStatus !== gl.FRAMEBUFFER_COMPLETE) {\n        switch (fbStatus) {\n            case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n                throw new Error(\"gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT\");\n            case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n                throw new Error(\"gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\");\n            case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n                throw new Error(\"gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS\");\n            case gl.FRAMEBUFFER_UNSUPPORTED:\n                throw new Error(\"gl.FRAMEBUFFER_UNSUPPORTED\");\n            case gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:\n                throw new Error(\"gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE\");\n            case gl.RENDERBUFFER_SAMPLES:\n                throw new Error(\"gl.RENDERBUFFER_SAMPLES\");\n            default:\n                throw new Error(\"unknown error, but framebuffer is not complete. Error is \" + fbStatus);\n        }\n    }\n}\n","type Props = {\n    // onchange: Function,\n    checked?: boolean,\n    id?: string;\n    name?: string;\n    type?: string,\n    className?: string,\n    for?: string,\n    value?: number | string,\n    min?: number,\n    max?: number,\n    step?: number,\n    onchange?: Function,\n}\n\ntype HTMLOrString = HTMLElement | string;\ntype Child = HTMLOrString | HTMLOrString[];\ntype RadioInputOption = {\n    label: string,\n    value: string | number,\n}\n\nconst nextId = (() => {\n    let id = 0;\n    return () => {\n        id++;\n        return id;\n    }\n})();\n\nexport const c = (name: string) => {\n    return {className: name}\n};\n\nexport const funcRef: Function = (ref?: Function) => {\n    const f = function () {\n        if (f.ref) {\n            f.ref.apply(null, arguments);\n        }\n    };\n    f.ref = ref;\n    return f;\n};\n\nexport const e = (name: string, props: Props, ...children: Child[]) => {\n    const el = document.createElement(name);\n    if (props) {\n        for (const k in props) {\n            if (!props.hasOwnProperty(k)) {\n                continue;\n            }\n            const v = props[k];\n            switch (k) {\n                case 'for':\n                    el.setAttribute('for', props.for);\n                    break;\n                default:\n                    el[k] = v;\n            }\n        }\n    }\n    const cb = c => {\n        if (c instanceof Array) {\n            c.map(cb);\n        } else if (typeof c === 'string') {\n            el.textContent = c;\n        } else {\n            el.appendChild(c);\n        }\n    };\n    children.map(cb);\n    return el;\n};\n\nexport const Form = (...children) => {\n    return e('div', c('form'), ...children);\n};\n\nexport const FormGroup = (label: string, ...children) => {\n    return e('div', c('form-group'),\n        e('label', null, label),\n        ...children\n    );\n};\n\nexport const FormRow = (...children) => {\n    return e('div', c('form-row'), ...children);\n};\n\n/**\n * @deprecated\n */\nexport const InputGroup = (...children) => {\n    // return e('div', c('input-group input-group-sm'), ...children);\n    return children;\n};\n\nexport const NumberInput = (label: string, props: Props, onChange: (number) => void) => {\n    return e('div', c('input-group input-group-xs'),\n        e('div', c('input-group-prepend'),\n            e('span', c('input-group-text'), label)\n        ),\n        e('input', {\n            ...props,\n            className: 'form-control',\n            type: 'number',\n            onchange: (ev) => {\n                props.value = ev.target.value;\n                onChange(ev.target.value);\n            },\n        }),\n    )\n};\n\nexport const SliderInput = (label: string, props: Props, onChange: (number) => void) => {\n    const id = nextId();\n    return [\n        e('label', {for: id.toString()}, label),\n        e('input', {\n            ...props,\n            className: 'form-control-range',\n            type: 'range',\n            id: id.toString(),\n            onchange: (ev) => {\n                props.value = ev.target.value;\n                onChange(ev.target.value);\n            },\n        }),\n    ]\n};\n\n\nexport const ColorInput = (label: string, props: Props, onChange: (string) => void) => {\n    const valueLabel = e('div', c('color-label'), props.value.toString());\n    return e('div', c('input-group input-group-xs'),\n        e('div', c('input-group-prepend'),\n            e('span', c('input-group-text'), label)\n        ),\n        e('input', {\n            ...props,\n            className: 'form-control',\n            type: 'color',\n            onchange: (ev) => {\n                const v = ev.target.value;\n                props.value = v;\n                valueLabel.textContent = v;\n                onChange(v);\n            },\n        }),\n        valueLabel\n    )\n};\n\nexport const RadioInput = (options: RadioInputOption[], props: Props, onChange: (string) => void) => {\n    const id = nextId();\n    return options.map(o => {\n        const eid = nextId();\n        return e('div', c('form-check'),\n            e('input', {\n                className: 'form-check-input',\n                name: id.toString(),\n                type: 'radio',\n                id: eid.toString(),\n                value: o.value,\n                checked: o.value === props.value,\n                onchange: (ev) => {\n                    props.value = ev.target.value;\n                    onChange(ev.target.value);\n                }\n            }),\n            e('label', {className: 'form-check-label', for: eid.toString()}, o.label)\n        )\n    });\n};\n\nexport const CheckBoxInput = (label: string, props: Props, onChange: (boolean) => void) => {\n    const id = nextId();\n    return e('div', c('form-check'),\n        e('input', {\n            ...props,\n            className: 'form-check-input',\n            type: 'checkbox',\n            id: id.toString(),\n            onchange: (ev) => {\n                props.checked = ev.target.checked;\n                onChange(ev.target.checked)\n            }\n        }),\n        e('label', {className: 'form-check-label', for: id.toString()}, label)\n    )\n};\n","import {ArrayBufferDataType, GLArrayBufferData, GLArrayBufferDataParams, GLArrayBufferI} from \"./glArrayBuffer\";\nimport {VertexShader} from \"./shaders\";\n\nexport const QuadVertices = new Float32Array([\n    -1.0, 1.0,\n    -1.0, -1.0,\n    1.0, 1.0,\n    1.0, -1.0,\n]);\nexport const QuadArrayBufferData = (() => {\n    const params = new GLArrayBufferDataParams(\n        false, false, 4, ArrayBufferDataType.TRIANGLE_STRIP\n    );\n    params.elementSize = 2;\n    return new GLArrayBufferData(QuadVertices, params);\n})();\nexport const FULLSCREEN_QUAD_VS = `\nprecision highp float;\n\nin vec2 a_pos;\nout vec2 v_pos;\nout vec2 tx_pos;\n\nvoid main() {\n    gl_Position = vec4(a_pos, 0., 1.);\n    v_pos = a_pos;\n    tx_pos = v_pos.xy * 0.5 + 0.5;\n}\n`;\n\nexport class FullScreenQuad {\n    vertexShader: VertexShader;\n    private glArrayBuffer: GLArrayBufferI;\n\n    constructor(gl: WebGL2RenderingContext, quadBuffer: GLArrayBufferI) {\n        this.glArrayBuffer = quadBuffer;\n        this.vertexShader = new VertexShader(gl, FULLSCREEN_QUAD_VS);\n        // this object owns the shader, don't let others delete it recursively.\n        this.vertexShader.setAutodelete(false);\n\n    }\n\n    bind(gl: WebGL2RenderingContext) {\n\n    }\n\n    draw(gl: WebGL2RenderingContext) {\n        this.glArrayBuffer.draw(gl);\n    }\n}\n","import * as glMatrix from \"./common.js\"\nimport * as mat3 from \"./mat3.js\"\nimport * as vec3 from \"./vec3.js\"\nimport * as vec4 from \"./vec4.js\"\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  let rad = Math.acos(q[3]) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  let x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > glMatrix.EPSILON ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Generates a random quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  let u1 = glMatrix.RANDOM();\n  let u2 = glMatrix.RANDOM();\n  let u3 = glMatrix.RANDOM();\n\n  let sqrt1MinusU1 = Math.sqrt(1 - u1);\n  let sqrtU1 = Math.sqrt(u1);\n\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  let invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if ( m[4] > m[0] )\n      i = 1;\n    if ( m[8] > m[i*3+i] )\n      i = 2;\n    let j = (i+1)%3;\n    let k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n    let halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function() {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.fromValues(1,0,0);\n  let yUnitVec3 = vec3.fromValues(0,1,0);\n\n  return function(out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  let temp1 = create();\n  let temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function() {\n  let matr = mat3.create();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b00 = b[0], b01 = b[1], b02 = b[2];\n  let b10 = b[3], b11 = b[4], b12 = b[5];\n  let b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as vec3 from \"gl-matrix/src/gl-matrix/vec3\";\nimport {tmpVec4} from \"./utils\";\nimport * as parseDDS from 'parse-dds';\n\nfunction r1to255(v: number): number {\n    return Math.trunc(v * 255);\n}\n\nexport function vec3ToUnit8Array(v: vec3) {\n    const nv = tmpVec4;\n    nv[0] = r1to255(v[0]);\n    nv[1] = r1to255(v[1]);\n    nv[2] = r1to255(v[2]);\n    nv[3] = 255;\n    return new Uint8Array(nv);\n}\n\nexport function fillTexture2DWithEmptyTexture(gl: WebGL2RenderingContext, defaultColor: vec3) {\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const width = 1;\n    const height = 1;\n    const border = 0;\n    const srcFormat = gl.RGBA;\n    const srcType = gl.UNSIGNED_BYTE;\n    const pixel = vec3ToUnit8Array(defaultColor);\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\n        width, height, border, srcFormat, srcType,\n        pixel);\n}\n\nexport interface Pixels {\n    setupTexture(gl: WebGL2RenderingContext)\n}\n\nexport class ImagePixels implements Pixels {\n    private img: HTMLImageElement;\n\n    constructor(img: HTMLImageElement) {\n        this.img = img;\n    }\n\n    setupTexture(gl: WebGL2RenderingContext) {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.img);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n        gl.generateMipmap(gl.TEXTURE_2D);\n    }\n}\n\nfunction getDDSFormat(ext: WEBGL_compressed_texture_s3tc, ddsFormat: string) {\n    switch (ddsFormat) {\n        case 'dxt1':\n            return ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n        case 'dxt3':\n            return ext.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n        case 'dxt5':\n            return ext.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n        default:\n            throw new Error('unsupported format ' + ddsFormat)\n    }\n}\n\nexport class DDSPixels implements Pixels {\n    private data: ArrayBuffer;\n    private dds: any;\n\n    constructor(data: ArrayBuffer) {\n        this.data = data;\n        this.dds = parseDDS(this.data);\n    }\n\n    setupTexture(gl: WebGL2RenderingContext) {\n        const ext = gl.getExtension(\"WEBGL_compressed_texture_s3tc\");\n        if (!ext) {\n            throw new Error(\"Compressed textures not supported, can't load WEBGL_compressed_texture_s3tc\")\n        }\n\n        for (let mip = 0; mip < this.dds.images.length; mip++) {\n            const image = this.dds.images[mip];\n            const data = new Uint8Array(this.data, image.offset, image.length);\n            var width = image.shape[0];\n            var height = image.shape[1];\n            gl.compressedTexImage2D(gl.TEXTURE_2D, mip, getDDSFormat(ext, this.dds.format), width, height, 0, data);\n        }\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n    }\n}\n\nexport class Texture {\n    private promise: Promise<void>;\n    private texture: WebGLTexture;\n\n    constructor(gl: WebGL2RenderingContext, pixels: Promise<Pixels>, defaultColor: vec3) {\n        this.texture = gl.createTexture();\n\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        fillTexture2DWithEmptyTexture(gl, defaultColor);\n\n        this.promise = pixels.then(img => this.bindImageToTexture(gl, img));\n    }\n\n    getTexture() {\n        return this.texture;\n    }\n\n    getPromise() {\n        return this.promise;\n    }\n\n    private bindImageToTexture(gl: WebGL2RenderingContext, pixels: Pixels) {\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        pixels.setupTexture(gl);\n    }\n}\n","import {Scene} from \"./scene\";\nimport * as quat from \"gl-matrix/src/gl-matrix/quat\";\nimport * as vec3 from \"gl-matrix/src/gl-matrix/vec3\";\nimport * as vec4 from \"gl-matrix/src/gl-matrix/vec4\";\nimport {DDSPixels, ImagePixels, Pixels, Texture} from \"./texture\";\nimport {Material} from \"./material\";\nimport {\n    ArrayWebGLBufferWrapper,\n    BufferView,\n    computeBoundingBox,\n    ElementArrayWebGLBufferWrapper,\n    GLArrayBufferGLTF,\n    GLArrayBufferI,\n    GLTFAccessor,\n} from \"./glArrayBuffer\";\nimport {GLTF} from \"./gltf-enums\";\nimport {BoundingBoxComponent, GameObject, GameObjectBuilder, MaterialComponent, MeshComponent} from \"./object\";\nimport {mapComputeIfAbsent} from \"./utils\";\nimport {AxisAlignedBox} from \"./axisAlignedBox\";\nimport {GlTf, MeshPrimitive} from \"./gltf-types\";\n\nexport function constructUrlBase(url: string) {\n    const parts = url.split('/');\n    if (parts.length === 1) {\n        return './';\n    }\n    parts.pop();\n    return parts.join('/') + '/';\n}\n\nconst m = () => new Map();\nconst white = vec3.fromValues(1, 1, 1);\n\nexport class GLTFLoader {\n    private buffers: Map<number, Promise<Uint8Array>> = m();\n    private bufferViewsIndices: Map<number, Promise<BufferView<ElementArrayWebGLBufferWrapper>>> = m();\n    private bufferViewsArrays: Map<number, Promise<BufferView<ArrayWebGLBufferWrapper>>> = m();\n    private images: Map<number, Promise<Pixels>> = m();\n    private textures: Map<number, Texture> = m();\n    private materials: Map<number, Material> = m();\n    private accessorsIndices: Map<number, Promise<GLTFAccessor<ElementArrayWebGLBufferWrapper>>> = m();\n    private accessorsArrays: Map<number, Promise<GLTFAccessor<ArrayWebGLBufferWrapper>>> = m();\n    private readonly urlPrefix: string;\n    private g: GlTf;\n    private readonly gl: WebGL2RenderingContext;\n    private urlJoin = (suffix: string): string => {\n        return this.urlPrefix + suffix;\n    };\n    private loadBuffer = (id: number): Promise<Uint8Array> => {\n        return mapComputeIfAbsent(this.buffers, id, async id => {\n            const uri = this.urlJoin(this.g.buffers[id].uri);\n            const response = await fetch(uri);\n            if (response.status != 200) {\n                throw new Error(`Unexpected response: ${response.status}`);\n            }\n            const buf = await response.arrayBuffer();\n            return new Uint8Array(buf);\n        });\n    };\n    private loadBufferViewIndices = (id: number): Promise<BufferView<ElementArrayWebGLBufferWrapper>> => {\n        return mapComputeIfAbsent(this.bufferViewsIndices, id, async id => {\n            const bv = this.g.bufferViews[id];\n            const buf = await this.loadBuffer(bv.buffer);\n            const glbuf = new ElementArrayWebGLBufferWrapper(this.gl, buf.subarray(bv.byteOffset, bv.byteOffset + bv.byteLength));\n            return new BufferView(glbuf, bv.byteLength);\n        })\n    };\n    private loadBufferViewArray = (id: number): Promise<BufferView<ArrayWebGLBufferWrapper>> => {\n        return mapComputeIfAbsent(this.bufferViewsArrays, id, async id => {\n            const bv = this.g.bufferViews[id];\n            const buf = await this.loadBuffer(bv.buffer);\n            const glbuf = new ArrayWebGLBufferWrapper(this.gl, buf.subarray(bv.byteOffset, bv.byteOffset + bv.byteLength));\n            return new BufferView(glbuf, bv.byteLength);\n        })\n    };\n    private loadAccessorIndices = (id: number): Promise<GLTFAccessor<ElementArrayWebGLBufferWrapper>> => {\n        if (id === null || id === undefined) {\n            return Promise.resolve(undefined);\n        }\n        return mapComputeIfAbsent(this.accessorsIndices, id, async id => {\n            const accessor = this.g.accessors[id];\n            const bv = await this.loadBufferViewIndices(accessor.bufferView);\n            return new GLTFAccessor<ElementArrayWebGLBufferWrapper>(accessor, bv);\n        })\n    };\n\n    constructor(gl: WebGL2RenderingContext, g: GlTf, urlPrefix: string) {\n        this.urlPrefix = urlPrefix;\n        this.g = g;\n        this.gl = gl;\n    }\n\n    async loadScene(id?: number): Promise<Scene> {\n        if (id === undefined) {\n            id = this.g.scene;\n            if (id === undefined) {\n                console.warn(\"Assuming the scene to load is 0 as it was not explicitly specified and GlTf has no default scene\");\n                id = 0;\n            }\n        }\n\n        const scene = new Scene();\n        this.g.scenes[id].nodes.forEach(nodeId => {\n            scene.addChild(this.toGameObject(nodeId));\n        });\n\n        return scene;\n\n    }\n\n    private loadImage(id: number): Promise<Pixels> {\n        return mapComputeIfAbsent(this.images, id, id => {\n            const img = this.g.images[id];\n            const uri = this.urlJoin(img.uri);\n\n            switch (img.mimeType) {\n                case \"image/vnd-ms.dds\":\n                    return fetch(uri).then(response => {\n                        if (!response.ok) {\n                            throw new Error(response.statusText)\n                        }\n                        return response.arrayBuffer();\n                    }).then(b => new DDSPixels(b));\n                default:\n                    return new Promise((resolve, reject) => {\n                        const img = new Image();\n                        img.src = uri;\n                        img.crossOrigin = \"anonymous\";\n                        img.addEventListener('load', () => {\n                            resolve(new ImagePixels(img));\n                        });\n                        img.addEventListener('error', e => {\n                            console.log(`error loading image ${id}`);\n                            reject(e);\n                        })\n                    });\n            }\n        });\n    };\n\n    private loadAccessorArrays(id: number): Promise<GLTFAccessor<ArrayWebGLBufferWrapper>> {\n        if (id === null || id === undefined) {\n            return Promise.resolve(undefined);\n        }\n        return mapComputeIfAbsent(this.accessorsArrays, id, async id => {\n            const accessor = this.g.accessors[id];\n            const bv = await this.loadBufferViewArray(accessor.bufferView);\n            return new GLTFAccessor<ArrayWebGLBufferWrapper>(accessor, bv);\n        })\n    };\n\n    private loadTexture(id: number): Texture {\n        return mapComputeIfAbsent(this.textures, id, () => {\n            const t = this.g.textures[id];\n            const img = this.loadImage(t.source);\n            return new Texture(this.gl, img, white);\n        });\n    };\n\n    private loadMaterial(id: number): Material {\n        return mapComputeIfAbsent(this.materials, id, id => {\n            const nm = new Material();\n            const m = this.g.materials[id];\n\n            const mr = m.pbrMetallicRoughness;\n\n            // albedo\n            if (mr.baseColorFactor) {\n                if (mr.baseColorTexture) {\n                    // @ts-ignore\n                    nm.albedo.setFactor(vec4.fromValues(...mr.baseColorFactor))\n                } else {\n                    vec4.copy(nm.albedo.value, mr.baseColorFactor);\n                }\n            }\n            if (mr.baseColorTexture) {\n                nm.albedo.setTexture(this.loadTexture(mr.baseColorTexture.index));\n            }\n\n            // metallic\n            if (mr.metallicFactor) {\n                if (mr.metallicRoughnessTexture) {\n                    nm.metallic.factor = mr.metallicFactor;\n                } else {\n                    nm.metallic.value = mr.metallicFactor;\n                }\n            }\n            if (mr.metallicRoughnessTexture) {\n                nm.metallic.texture = this.loadTexture(mr.metallicRoughnessTexture.index);\n            }\n\n            // roughness\n            if (mr.roughnessFactor) {\n                if (mr.metallicRoughnessTexture) {\n                    nm.roughness.factor = mr.roughnessFactor;\n                } else {\n                    nm.roughness.value = mr.roughnessFactor;\n                }\n            }\n            if (mr.metallicRoughnessTexture) {\n                nm.roughness.texture = this.loadTexture(mr.metallicRoughnessTexture.index);\n            }\n            if (m.normalTexture) {\n                nm.setNormalMap(this.loadTexture(m.normalTexture.index));\n            }\n            return nm;\n        })\n    };\n\n    private loadPrimitive(p: MeshPrimitive): Promise<GLArrayBufferI> {\n        if (p.mode !== undefined && p.mode != GLTF.TRIANGLES) {\n            throw new Error(`Not trianges: ${p.mode}`);\n        }\n\n        const posAccessor = this.g.accessors[p.attributes['POSITION']];\n        const bb = new AxisAlignedBox().setMin(posAccessor.min).setMax(posAccessor.max);\n\n        return Promise.all([\n            this.loadAccessorIndices(p.indices),\n            this.loadAccessorArrays(p.attributes['POSITION']),\n            this.loadAccessorArrays(p.attributes['TEXCOORD_0']),\n            this.loadAccessorArrays(p.attributes['NORMAL']),\n            this.loadAccessorArrays(p.attributes['TANGENT'])\n        ]).then(([indices, pos, uv, normal, tangent]) => {\n            return new GLArrayBufferGLTF(\n                this.gl, indices, pos, uv, normal, tangent, bb\n            );\n        });\n    }\n\n    private toGameObject(nodeId: number): GameObject {\n        const node = this.g.nodes[nodeId];\n        const gameObject = new GameObject(node.name || nodeId.toString());\n        if (node.scale) {\n            vec3.copy(gameObject.transform.scale, node.scale);\n        }\n        if (node.translation) {\n            vec3.copy(gameObject.transform.position, node.translation);\n        }\n        if (node.rotation) {\n            // @ts-ignore\n            quat.getAxisAngle(gameObject.transform.rotation, quat.fromValues(...node.rotation));\n        }\n        gameObject.transform.update();\n\n        if (node.mesh !== undefined) {\n            const mesh = this.g.meshes[node.mesh];\n            let bb = null;\n\n            mesh.primitives.forEach((p, pi) => {\n                this.loadPrimitive(p).then(buf => {\n                    const primitiveBB = buf.getBoundingBox();\n                    const primitiveGameObject = new GameObjectBuilder(`mesh ${node.mesh}, primitive ${pi}`)\n                        .setMeshComponent(new MeshComponent(buf))\n                        .setBoundingBoxComponent(\n                            new BoundingBoxComponent(primitiveBB)\n                        )\n                        .setMaterialComponent(\n                            new MaterialComponent(this.loadMaterial(p.material))\n                        ).build();\n\n                    const isFirst = bb === null;\n                    bb = computeBoundingBox([primitiveBB], false, bb, bb);\n                    gameObject.addChild(primitiveGameObject);\n\n                    if (isFirst) {\n                        gameObject.boundingBoxComponent = new BoundingBoxComponent(bb).setComputedFromChildren(true);\n                    }\n                });\n            });\n        }\n        if (node.children) {\n            node.children.forEach(nodeId => {\n                const child = this.toGameObject(nodeId);\n                gameObject.addChild(child);\n            })\n        }\n        return gameObject;\n    }\n}\n\nexport async function fetchGLTF(gltfFilename: string): Promise<GlTf> {\n    const response = await fetch(gltfFilename);\n    if (!response.ok) {\n        throw new Error(`Error loading gltf from ${gltfFilename}: ${response.statusText}`);\n    }\n    return response.json();\n}\n\nexport async function newGLTFLoader(gl: WebGL2RenderingContext, gltfFilename: string): Promise<GLTFLoader> {\n    const g = await fetchGLTF(gltfFilename);\n    return new GLTFLoader(gl, g, constructUrlBase(gltfFilename));\n}\n\nexport async function loadSceneFromGLTF(gl: WebGL2RenderingContext, gltfFilename: string): Promise<Scene> {\n    const loader = await newGLTFLoader(gl, gltfFilename);\n    return loader.loadScene();\n}\n","import {fetchObject} from \"./objparser\";\nimport {clip, hexToRgb1, initGL, optimizeNearFar, tmpVec3, tmpVec4} from \"./utils\";\nimport {ProgressBar, ProgressBarCommon} from \"./progressbar\";\nimport {DirectionalLight, GameObjectBuilder, MaterialComponent} from \"./object\";\nimport {Camera} from \"./camera\";\n\nimport * as vec3 from \"gl-matrix/src/gl-matrix/vec3\";\nimport {randomPointLight, Scene} from \"./scene\";\nimport {DeferredRenderer, DeferredRendererConfig, ShadowMapConfig, ShowLayer, SSRConfig} from \"./deferredRenderer\";\nimport {GLArrayBufferI, GLArrayBufferV1} from \"./glArrayBuffer\";\nimport * as ui from \"./ui\";\nimport {SSAOConfig, SSAOState} from \"./SSAOState\";\nimport {Material} from \"./material\";\nimport {FullScreenQuad, QuadArrayBufferData} from \"./quad\";\nimport {loadSceneFromGLTF} from \"./gltf\";\nimport {SAMPLE_GLTF_SPONZA_DDS} from \"./constants\";\n\n\nconst originZero = vec3.create();\nconst PI2 = Math.PI / 2.0 - 0.01;\n\nconst printError = e => {\n    console.error(e);\n    const errE = document.getElementById('error');\n    errE.innerText = e.toString();\n    errE.style.display = '';\n};\n\nfunction main() {\n    const state = {\n        lighting: {\n            lightCount: {\n                value: 1,\n                min: 0,\n                max: 1000,\n                step: 1,\n                onChange: ui.funcRef(),\n            },\n            sun: {\n                intensity: {value: 60., min: 0, step: 0.1, onChange: ui.funcRef()},\n            },\n            'new': {\n                radius: {value: 1.5, min: 0, max: 100, step: 0.1, onChange: ui.funcRef()},\n                posScale: {value: 1.5, min: 0, max: 100, step: 0.1, onChange: ui.funcRef()},\n                intensity: {value: 1., min: 0, max: 100, step: 0.1, onChange: ui.funcRef()},\n            }\n        },\n        ssr: {\n            enable: {\n                onChange: ui.funcRef(),\n                checked: true,\n            }\n        },\n        shadowMap: {\n            enable: {\n                onChange: ui.funcRef(),\n                checked: true,\n            },\n            bias: {\n                fixed: {value: 0.005, min: 0, step: 0.0001, onChange: ui.funcRef()},\n                normal: {value: 0.001, min: 0, step: 0.0001, onChange: ui.funcRef()},\n            }\n        },\n        ssao: {\n            enable: {\n                onChange: ui.funcRef(),\n                checked: true,\n            },\n            sampleCount: {value: 64, min: 1, step: 1, onChange: ui.funcRef()},\n            noiseScale: {value: 4, min: 2, step: 1, onChange: ui.funcRef()},\n            radius: {value: 1., min: 0.001, step: 0.1, onChange: ui.funcRef(),},\n            bias: {value: 0.02, step: 0.001, min: 0.001, onChange: ui.funcRef(),},\n            strength: {value: 2.0, min: 0, step: 0.5, onChange: ui.funcRef(),},\n            scalePower: {value: 2, min: 0, step: 0.5, onChange: ui.funcRef(),},\n            blurPositionThreshold: {value: 0.3, min: 0, step: 0.01, onChange: ui.funcRef()},\n            blurNormalThreshold: {value: 0.9, min: 0, step: 0.05, onChange: ui.funcRef()},\n        },\n        showLayer: {\n            value: ShowLayer.Final,\n            onChange: ui.funcRef(),\n            options: [\n                {label: 'Final', value: ShowLayer.Final},\n                {label: 'Positions', value: ShowLayer.Positions},\n                {label: 'Normals', value: ShowLayer.Normals},\n                {label: 'SSAO', value: ShowLayer.SSAO},\n                {label: 'Color', value: ShowLayer.Color},\n                {label: 'Shadow Map', value: ShowLayer.ShadowMap},\n                {label: 'Metallic', value: ShowLayer.Metallic},\n                {label: 'Roughness', value: ShowLayer.Roughness},\n                {label: 'SSR', value: ShowLayer.SSR},\n            ]\n        },\n        shouldRotate: {\n            onChange: ui.funcRef(),\n            checked: true\n        },\n        normalMapsEnabled: {\n            onChange: ui.funcRef(),\n            checked: true\n        },\n        albedoTexturesEnabled: {\n            onChange: ui.funcRef(),\n            checked: true,\n        },\n        pause: {\n            onChange: ui.funcRef(),\n            checked: false,\n        },\n        materials: {},\n        fps: {\n            min: 0,\n            max: 0,\n            current: 0,\n        }\n    };\n\n    const n = (label: string, props: any) => {\n        return ui.NumberInput(label, props, props.onChange);\n    };\n\n    const color = (label: string, props: any) => {\n        return ui.ColorInput(label, props, props.onChange);\n    };\n\n    const slider = (label: string, props: any) => {\n        return ui.SliderInput(label, props, props.onChange);\n    };\n\n    const minFpsE = document.getElementById('min-fps');\n    const maxFpsE = document.getElementById('max-fps');\n    const currentFpsE = document.getElementById('current-fps');\n\n    const updateFpsHTML = () => {\n        currentFpsE.innerText = state.fps.current.toFixed(2);\n        minFpsE.innerText = state.fps.min.toFixed(2);\n        maxFpsE.innerText = state.fps.max.toFixed(2);\n    };\n    updateFpsHTML();\n\n    document.getElementById('app').appendChild(\n        ui.Form(\n            ui.FormRow(\n                ui.e('div', ui.c('col-lg'),\n                    ui.FormGroup('Features',\n                        ui.CheckBoxInput('Pause', state.pause, state.pause.onChange),\n                        ui.CheckBoxInput('Rotate / animate', state.shouldRotate, state.shouldRotate.onChange),\n                        ui.CheckBoxInput('SSAO', state.ssao.enable, state.ssao.enable.onChange),\n                        ui.CheckBoxInput('Shadow Map', state.shadowMap.enable, state.shadowMap.enable.onChange),\n                        ui.CheckBoxInput('Normal maps', state.normalMapsEnabled, state.normalMapsEnabled.onChange),\n                        ui.CheckBoxInput('Albedo textures', state.albedoTexturesEnabled, state.albedoTexturesEnabled.onChange),\n                        ui.CheckBoxInput('Screen-space reflections', state.ssr.enable, state.ssr.enable.onChange),\n                    ),\n                    ui.FormGroup('Layer to show',\n                        ui.RadioInput(state.showLayer.options, state.showLayer, state.showLayer.onChange)\n                    ),\n                    ui.FormGroup('SSAO',\n                        n('Samples', state.ssao.sampleCount),\n                        n('Noise scale', state.ssao.noiseScale),\n                        n('Radius', state.ssao.radius),\n                        n('Bias', state.ssao.bias),\n                        n('Strength', state.ssao.strength),\n                        n('Scale power', state.ssao.scalePower),\n                    ),\n                    ui.FormGroup('SSAO Blur',\n                        n('Pos. threshold', state.ssao.blurPositionThreshold),\n                        n('Normal threshold', state.ssao.blurNormalThreshold),\n                    ),\n                ),\n                ui.e('div', ui.c('col-lg'),\n                    ui.FormGroup('Shadow Map',\n                        n('Fixed bias', state.shadowMap.bias.fixed),\n                        n('Normal bias', state.shadowMap.bias.normal),\n                    ),\n                    ui.FormGroup('Lighting',\n                        n('Light count', state.lighting.lightCount),\n                    ),\n                    ui.FormGroup('Sun',\n                        n('Intensity', state.lighting.sun.intensity),\n                    ),\n                    ui.FormGroup('New lights',\n                        n('Radius', state.lighting.new.radius),\n                        n('Pos scale', state.lighting.new.posScale),\n                        n('Intensity', state.lighting.new.intensity),\n                    ),\n                ),\n            ),\n        )\n    );\n\n    const canvas = <HTMLCanvasElement>document.getElementById(\"gl\");\n    // canvas.width = window.innerWidth;\n    // canvas.height = window.innerHeight;\n    const gl = initGL(canvas);\n\n    const quadArrayBuffer: GLArrayBufferI = new GLArrayBufferV1(gl, QuadArrayBufferData);\n    const fb = new FullScreenQuad(gl, quadArrayBuffer);\n    const progressBarCommon = new ProgressBarCommon(gl, fb);\n    const progressBar = new ProgressBar(gl, progressBarCommon);\n\n    var contentLength = 1;\n    var downloaded = 0;\n\n    gl.clearColor(0, 0, 0, 1);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    progressBar.prepare(gl);\n\n    const onHeaders = ({headers, length}) => {\n        if (headers) {\n            contentLength = parseInt(headers.get(\"content-length\"));\n        } else {\n            downloaded += length;\n            const progress: number = downloaded / contentLength;\n            progressBar.render(gl, progress);\n        }\n    };\n\n    const onColorChanges = (stateRef: any, material: Material) => {\n        stateRef.albedo.onChange.ref = (v) => {\n            hexToRgb1(material.albedo.value, v);\n        };\n        stateRef.metallic.onChange.ref = v => {\n            material.setMetallic(v);\n        };\n        stateRef.roughness.onChange.ref = v => {\n            material.setRoughness(v);\n        };\n    };\n\n    const makeMaterialFromState = (stateRef): Material => {\n        const albedo = hexToRgb1(tmpVec4, stateRef.albedo.value);\n        return new Material()\n            .setAlbedo(albedo[0], albedo[1], albedo[2], 1.)\n            .setRoughness(stateRef.roughness.value)\n            .setMetallic(stateRef.metallic.value)\n    };\n\n    Promise.all([\n        fetchObject('resources/sphere.obj', onHeaders).then(parser => {\n            return parser.getArrayBuffer().intoGLArrayBuffer(gl);\n        }),\n        fetchObject('resources/plane.obj', onHeaders).then(parser => {\n            return parser.getArrayBuffer().intoGLArrayBuffer(gl);\n        }),\n    ]).then(([sphereMesh, planeMesh]) => {\n        const camera = new Camera(gl.canvas.width / gl.canvas.height);\n        camera.position = vec3.fromValues(0, 0, -3.);\n\n        const ssaoConfig = new SSAOConfig();\n        const shadowMapConfig = new ShadowMapConfig();\n        const ssrConfig = new SSRConfig();\n\n        const updateSSAOConfig = () => {\n            const c = ssaoConfig;\n            const s = state.ssao;\n            c.strength = s.strength.value;\n            c.scalePower = s.scalePower.value;\n            c.bias = s.bias.value;\n            c.radius = s.radius.value;\n            c.noiseScale = s.noiseScale.value;\n            c.sampleCount = s.sampleCount.value;\n            c.enabled = state.ssao.enable.checked;\n            c.blurNormalThreshold = state.ssao.blurNormalThreshold.value;\n            c.blurPositionThreshold = state.ssao.blurPositionThreshold.value;\n        };\n        updateSSAOConfig();\n\n        const updateShadowMapConfig = () => {\n            const c = shadowMapConfig;\n            const s = state.shadowMap;\n            c.enabled = s.enable.checked;\n            c.normalBias = s.bias.normal.value;\n            c.fixedBias = s.bias.fixed.value;\n        };\n        updateShadowMapConfig();\n\n        const updateSSRConfig = () => {\n            ssrConfig.enabled = state.ssr.enable.checked;\n        };\n        updateSSRConfig();\n\n        const ssaoState = new SSAOState(gl, ssaoConfig);\n        const rendererConfig = new DeferredRendererConfig();\n        rendererConfig.ssao = ssaoConfig;\n        rendererConfig.shadowMap = shadowMapConfig;\n        rendererConfig.ssr = ssrConfig;\n        rendererConfig.showLayer = state.showLayer.value;\n        rendererConfig.normalMapsEnabled = state.normalMapsEnabled.checked;\n        rendererConfig.albedoTexturesEnabled = state.albedoTexturesEnabled.checked;\n\n        const renderer = new DeferredRenderer(gl, rendererConfig, fb, sphereMesh, ssaoState);\n        let scene = new Scene();\n\n        state.normalMapsEnabled.onChange.ref = v => {\n            rendererConfig.normalMapsEnabled = v;\n        };\n        state.albedoTexturesEnabled.onChange.ref = v => {\n            rendererConfig.albedoTexturesEnabled = v;\n        };\n\n        loadSceneFromGLTF(gl, SAMPLE_GLTF_SPONZA_DDS).then(newScene => {\n            scene = newScene;\n            scene.directionalLights.push(sun.directionalLight);\n\n            // camera.far = 50;\n            vec3.set(camera.position, -6.4035325050354, 1.3013536930084229, -0.20439213514328003);\n            vec3.set(camera.forward, 1, 0, 0);\n            camera.calculateUpFromWorldUp();\n        }, (err) => {\n            printError(err);\n        });\n\n        const sun = new GameObjectBuilder(\"sun\").setDirectionalLightComponent(new DirectionalLight()).build();\n        sun.directionalLight.direction = vec3.normalize(sun.directionalLight.direction, [-1, -1, -1]);\n        sun.directionalLight.intensity = state.lighting.sun.intensity.value;\n\n        scene.directionalLights.push(sun.directionalLight);\n\n\n        // TEST 2 shadow lights\n        // const sun2 = new GameObjectBuilder(\"sun 2\").setDirectionalLightComponent(new DirectionalLight()).build();\n        // sun2.directionalLight.direction = vec3.normalize(sun2.directionalLight.direction, [-1, -0.2, 1]);\n        // sun2.directionalLight.intensity = 0.5;\n        // sun2.directionalLight.ambient = v3(state.lighting.sun.ambient.value);\n        // sun2.directionalLight.diffuse = v3(state.lighting.sun.diffuse.value);\n        // sun2.directionalLight.specular = v3(state.lighting.sun.specular.value);\n        //\n        // scene.directionalLights.push(sun2.directionalLight);\n\n        let delta = 1000. / 60;\n        let lastStart = null;\n        let frame = 0;\n\n        function processFrame(timestamp: DOMHighResTimeStamp) {\n            if (state.pause.checked) {\n                return;\n            }\n\n            if (lastStart === null) {\n                delta = 1000 / 60;\n                lastStart = timestamp;\n            } else {\n                delta = timestamp - lastStart;\n                lastStart = timestamp;\n            }\n\n            state.fps.current = 1000 / delta;\n            if (frame % 100 === 0) {\n                state.fps.min = state.fps.current;\n                state.fps.max = state.fps.current;\n            } else {\n                state.fps.min = Math.min(state.fps.min, state.fps.current);\n                state.fps.max = Math.max(state.fps.max, state.fps.current)\n            }\n            frame++;\n            if (frame % 5 === 0) {\n                updateFpsHTML();\n            }\n\n            pressedKeys.forEach((v, k) => {\n                const moveSpeed = delta * 0.003;\n                switch (k) {\n                    case 'e':\n                        vec3.scale(tmpVec3, camera.up, moveSpeed);\n                        vec3.add(camera.position, camera.position, tmpVec3);\n                        camera.update();\n                        break;\n                    case 'z':\n                        vec3.scale(tmpVec3, camera.up, -moveSpeed);\n                        vec3.add(camera.position, camera.position, tmpVec3);\n                        camera.update();\n                        break;\n                    case 'w':\n                        vec3.scale(tmpVec3, camera.forward, moveSpeed);\n                        vec3.add(camera.position, camera.position, tmpVec3);\n                        camera.update();\n                        break;\n                    case 's':\n                        vec3.scale(tmpVec3, camera.forward, -moveSpeed);\n                        vec3.add(camera.position, camera.position, tmpVec3);\n                        camera.update();\n                        break;\n                    case 'a':\n                        vec3.scale(tmpVec3, camera.right(), -moveSpeed);\n                        vec3.add(camera.position, camera.position, tmpVec3);\n                        camera.update();\n                        break;\n                    case 'd':\n                        vec3.scale(tmpVec3, camera.right(), moveSpeed);\n                        vec3.add(camera.position, camera.position, tmpVec3);\n                        camera.update();\n                        break;\n                }\n            });\n\n            if (state.shouldRotate.checked) {\n                vec3.normalize(sun.directionalLight.direction,\n                    [-0.5, -0.95, Math.sin(timestamp / 8000) * 0.25]\n                );\n            }\n\n            optimizeNearFar(camera, scene);\n            renderer.render(scene, camera);\n\n            requestAnimationFrame(processFrame);\n        }\n\n        var zoom = 1.0;\n        var pitch = 0.;\n        var yaw = 0.;\n        var sensitivityY = 0.0001;\n        var sensitivityX = 0.0001;\n\n        const pressedKeys = new Map<String, Boolean>();\n\n        window.onkeydown = ev => {\n            pressedKeys.set(ev.key, true);\n        };\n        window.onkeyup = ev => {\n            pressedKeys.delete(ev.key);\n        };\n\n        var initialFov = camera.fov;\n\n        canvas.onwheel = ev => {\n            if (ev.ctrlKey) {\n                zoom = clip(zoom + ev.deltaY * camera.fov * 0.0001, 0.1, 1.90);\n                camera.fov = initialFov * zoom;\n                camera.update()\n            } else if (ev.shiftKey) {\n                vec3.scale(tmpVec3, camera.up, -ev.deltaY * 0.01);\n                vec3.add(camera.position, camera.position, tmpVec3);\n\n                vec3.scale(tmpVec3, camera.right(), ev.deltaX * 0.01);\n                vec3.add(camera.position, camera.position, tmpVec3);\n                camera.update()\n            } else {\n                pitch += ev.deltaY * sensitivityY * camera.fov;\n                yaw -= ev.deltaX * sensitivityX * camera.fov;\n\n                pitch = clip(pitch, -PI2, PI2);\n\n                let forward = vec3.fromValues(0, 0, 1);\n                let up = vec3.fromValues(0, 1, 0);\n\n                vec3.rotateX(forward, forward, originZero, pitch);\n                vec3.rotateY(forward, forward, originZero, yaw);\n\n                vec3.rotateX(up, up, originZero, pitch);\n                vec3.rotateY(up, up, originZero, yaw);\n                camera.forward = forward;\n                camera.up = up;\n                camera.update()\n            }\n\n            ev.preventDefault();\n        };\n\n        state.ssr.enable.onChange.ref = updateSSRConfig;\n\n        const onSSSAOStateParamsChange = () => {\n            updateSSAOConfig();\n            ssaoState.recalculate(gl, ssaoConfig);\n            renderer.onChangeSSAOState();\n        };\n\n        state.ssao.sampleCount.onChange.ref = onSSSAOStateParamsChange;\n        state.ssao.noiseScale.onChange.ref = onSSSAOStateParamsChange;\n        state.ssao.scalePower.onChange.ref = onSSSAOStateParamsChange;\n        state.ssao.strength.onChange.ref = (v, prev) => {\n            renderer.config.ssao.strength = v;\n            if (v === 0 || prev === 0) {\n                renderer.recompileShaders();\n            }\n        };\n        state.ssao.bias.onChange.ref = updateSSAOConfig;\n        state.ssao.radius.onChange.ref = updateSSAOConfig;\n        state.ssao.blurPositionThreshold.onChange.ref = updateSSAOConfig;\n        state.ssao.blurNormalThreshold.onChange.ref = updateSSAOConfig;\n        state.ssao.enable.onChange.ref = v => {\n            renderer.config.ssao.enabled = v;\n            console.log('SSAOState enabled', renderer.config.ssao.enabled);\n            renderer.recompileShaders();\n        };\n\n        state.shadowMap.bias.fixed.onChange.ref = updateShadowMapConfig;\n        state.shadowMap.bias.normal.onChange.ref = updateShadowMapConfig;\n        state.shadowMap.enable.onChange.ref = v => {\n            renderer.config.shadowMap.enabled = v;\n            console.log('shadowmap enabled', renderer.config.shadowMap.enabled);\n            renderer.recompileShaders();\n        };\n\n        state.lighting.sun.intensity.onChange.ref = v => {\n            sun.directionalLight.intensity = v;\n        };\n        state.lighting.lightCount.onChange.ref = v => {\n            v = clip(v, 0, 500);\n            console.log(scene.pointLights.length);\n            const diff = scene.pointLights.length - v;\n            if (diff > 0) {\n                for (let index = 0; index < diff; index++) {\n                    scene.pointLights.pop();\n                }\n            } else if (diff < 0) {\n                for (let index = 0; index < -diff; index++) {\n                    const l = randomPointLight(state.lighting.new.posScale.value, state.lighting.new.intensity.value);\n                    l.radius = state.lighting.new.radius.value;\n                    scene.pointLights.push(l)\n                }\n            }\n            console.log('new point light count ' + scene.pointLights.length);\n        };\n        state.lighting.lightCount.onChange(state.lighting.lightCount.value);\n\n\n        state.showLayer.onChange.ref = vstring => {\n            const v = ShowLayer[vstring];\n            console.log('setting show layer to ' + v);\n            renderer.config.showLayer = parseInt(vstring);\n            renderer.recompileShaders();\n        };\n\n        state.pause.onChange.ref = isPaused => {\n            if (!isPaused) {\n                lastStart = null;\n                requestAnimationFrame(processFrame);\n            }\n        };\n\n        requestAnimationFrame(processFrame)\n\n    }).catch(printError);\n}\n\nwindow.addEventListener('load', () => {\n    try {\n        main()\n    } catch (e) {\n        printError(e);\n    }\n});\n"],"sourceRoot":""}